//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
//
// On Sun Mar 22 00:26:17 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// slave_request_canPut           O     1
// RDY_slave_request_put          O     1
// slave_response_canGet          O     1
// slave_response_peek            O   270
// RDY_slave_response_peek        O     1
// slave_response_get             O   270
// RDY_slave_response_get         O     1 const
// read_master_ARID               O     8
// read_master_ARADDR             O    40
// read_master_ARLEN              O     4
// read_master_ARSIZE             O     3
// read_master_ARBURST            O     2
// read_master_ARLOCK             O     2
// read_master_ARCACHE            O     4
// read_master_ARPROT             O     3
// read_master_ARVALID            O     1 reg
// read_master_RREADY             O     1 reg
// write_master_AWID              O     8
// write_master_AWADDR            O    40 reg
// write_master_AWLEN             O     4
// write_master_AWSIZE            O     3
// write_master_AWBURST           O     2
// write_master_AWLOCK            O     2
// write_master_AWCACHE           O     4
// write_master_AWPROT            O     3
// write_master_AWVALID           O     1 reg
// write_master_WID               O     8
// write_master_WDATA             O   256 reg
// write_master_WSTRB             O    32
// write_master_WLAST             O     1
// write_master_WVALID            O     1 reg
// write_master_BREADY            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_request_put_val          I   350
// read_master_ARREADY            I     1
// read_master_RID                I     8 reg
// read_master_RDATA              I   256 reg
// read_master_RRESP              I     2
// read_master_RLAST              I     1 reg
// read_master_RVALID             I     1
// write_master_AWREADY           I     1
// write_master_WREADY            I     1
// write_master_BID               I     8 reg
// write_master_BRESP             I     2
// write_master_BVALID            I     1
// EN_slave_request_put           I     1
// EN_slave_response_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInternalToAxi(CLK,
		       RST_N,

		       slave_request_canPut,

		       slave_request_put_val,
		       EN_slave_request_put,
		       RDY_slave_request_put,

		       slave_response_canGet,

		       slave_response_peek,
		       RDY_slave_response_peek,

		       EN_slave_response_get,
		       slave_response_get,
		       RDY_slave_response_get,

		       read_master_ARID,

		       read_master_ARADDR,

		       read_master_ARLEN,

		       read_master_ARSIZE,

		       read_master_ARBURST,

		       read_master_ARLOCK,

		       read_master_ARCACHE,

		       read_master_ARPROT,

		       read_master_ARVALID,

		       read_master_ARREADY,

		       read_master_RREADY,

		       read_master_RID,

		       read_master_RDATA,

		       read_master_RRESP,

		       read_master_RLAST,

		       read_master_RVALID,

		       write_master_AWID,

		       write_master_AWADDR,

		       write_master_AWLEN,

		       write_master_AWSIZE,

		       write_master_AWBURST,

		       write_master_AWLOCK,

		       write_master_AWCACHE,

		       write_master_AWPROT,

		       write_master_AWVALID,

		       write_master_AWREADY,

		       write_master_WID,

		       write_master_WDATA,

		       write_master_WSTRB,

		       write_master_WLAST,

		       write_master_WVALID,

		       write_master_WREADY,

		       write_master_BREADY,

		       write_master_BID,

		       write_master_BRESP,

		       write_master_BVALID);
  input  CLK;
  input  RST_N;

  // value method slave_request_canPut
  output slave_request_canPut;

  // action method slave_request_put
  input  [349 : 0] slave_request_put_val;
  input  EN_slave_request_put;
  output RDY_slave_request_put;

  // value method slave_response_canGet
  output slave_response_canGet;

  // value method slave_response_peek
  output [269 : 0] slave_response_peek;
  output RDY_slave_response_peek;

  // actionvalue method slave_response_get
  input  EN_slave_response_get;
  output [269 : 0] slave_response_get;
  output RDY_slave_response_get;

  // value method read_master_arID
  output [7 : 0] read_master_ARID;

  // value method read_master_arADDR
  output [39 : 0] read_master_ARADDR;

  // value method read_master_arLEN
  output [3 : 0] read_master_ARLEN;

  // value method read_master_arSIZE
  output [2 : 0] read_master_ARSIZE;

  // value method read_master_arBURST
  output [1 : 0] read_master_ARBURST;

  // value method read_master_arLOCK
  output [1 : 0] read_master_ARLOCK;

  // value method read_master_arCACHE
  output [3 : 0] read_master_ARCACHE;

  // value method read_master_arPROT
  output [2 : 0] read_master_ARPROT;

  // value method read_master_arVALID
  output read_master_ARVALID;

  // action method read_master_arREADY
  input  read_master_ARREADY;

  // value method read_master_rREADY
  output read_master_RREADY;

  // action method read_master_rID
  input  [7 : 0] read_master_RID;

  // action method read_master_rDATA
  input  [255 : 0] read_master_RDATA;

  // action method read_master_rRESP
  input  [1 : 0] read_master_RRESP;

  // action method read_master_rLAST
  input  read_master_RLAST;

  // action method read_master_rVALID
  input  read_master_RVALID;

  // value method write_master_awID
  output [7 : 0] write_master_AWID;

  // value method write_master_awADDR
  output [39 : 0] write_master_AWADDR;

  // value method write_master_awLEN
  output [3 : 0] write_master_AWLEN;

  // value method write_master_awSIZE
  output [2 : 0] write_master_AWSIZE;

  // value method write_master_awBURST
  output [1 : 0] write_master_AWBURST;

  // value method write_master_awLOCK
  output [1 : 0] write_master_AWLOCK;

  // value method write_master_awCACHE
  output [3 : 0] write_master_AWCACHE;

  // value method write_master_awPROT
  output [2 : 0] write_master_AWPROT;

  // value method write_master_awVALID
  output write_master_AWVALID;

  // action method write_master_awREADY
  input  write_master_AWREADY;

  // value method write_master_wID
  output [7 : 0] write_master_WID;

  // value method write_master_wDATA
  output [255 : 0] write_master_WDATA;

  // value method write_master_wSTRB
  output [31 : 0] write_master_WSTRB;

  // value method write_master_wLAST
  output write_master_WLAST;

  // value method write_master_wVALID
  output write_master_WVALID;

  // action method write_master_wREADY
  input  write_master_WREADY;

  // value method write_master_bREADY
  output write_master_BREADY;

  // action method write_master_bID
  input  [7 : 0] write_master_BID;

  // action method write_master_bRESP
  input  [1 : 0] write_master_BRESP;

  // action method write_master_bVALID
  input  write_master_BVALID;

  // signals for module outputs
  wire [269 : 0] slave_response_get, slave_response_peek;
  wire [255 : 0] write_master_WDATA;
  wire [39 : 0] read_master_ARADDR, write_master_AWADDR;
  wire [31 : 0] write_master_WSTRB;
  wire [7 : 0] read_master_ARID, write_master_AWID, write_master_WID;
  wire [3 : 0] read_master_ARCACHE,
	       read_master_ARLEN,
	       write_master_AWCACHE,
	       write_master_AWLEN;
  wire [2 : 0] read_master_ARPROT,
	       read_master_ARSIZE,
	       write_master_AWPROT,
	       write_master_AWSIZE;
  wire [1 : 0] read_master_ARBURST,
	       read_master_ARLOCK,
	       write_master_AWBURST,
	       write_master_AWLOCK;
  wire RDY_slave_request_put,
       RDY_slave_response_get,
       RDY_slave_response_peek,
       read_master_ARVALID,
       read_master_RREADY,
       slave_request_canPut,
       slave_response_canGet,
       write_master_AWVALID,
       write_master_BREADY,
       write_master_WLAST,
       write_master_WVALID;

  // inlined wires
  wire [269 : 0] w_read_rsp$wget, w_response$wget, w_write_rsp$wget;
  wire w_get_read_response$whas,
       w_get_write_response$whas,
       w_read_rsp_last$whas;

  // register last_rsp
  reg last_rsp;
  wire last_rsp$D_IN, last_rsp$EN;

  // register read_rsp_prio
  reg read_rsp_prio;
  wire read_rsp_prio$D_IN, read_rsp_prio$EN;

  // ports of submodule convert_r
  wire [349 : 0] convert_r$slave_request_put_val;
  wire [269 : 0] convert_r$slave_response_peek;
  wire [255 : 0] convert_r$master_RDATA;
  wire [39 : 0] convert_r$master_ARADDR;
  wire [7 : 0] convert_r$master_ARID, convert_r$master_RID;
  wire [3 : 0] convert_r$master_ARCACHE, convert_r$master_ARLEN;
  wire [2 : 0] convert_r$master_ARPROT, convert_r$master_ARSIZE;
  wire [1 : 0] convert_r$master_ARBURST,
	       convert_r$master_ARLOCK,
	       convert_r$master_RRESP;
  wire convert_r$EN_slave_request_put,
       convert_r$EN_slave_response_get,
       convert_r$RDY_slave_request_put,
       convert_r$RDY_slave_response_get,
       convert_r$RDY_slave_response_peek,
       convert_r$master_ARREADY,
       convert_r$master_ARVALID,
       convert_r$master_RLAST,
       convert_r$master_RREADY,
       convert_r$master_RVALID,
       convert_r$slave_request_canPut,
       convert_r$slave_response_canGet;

  // ports of submodule convert_w
  wire [349 : 0] convert_w$slave_request_put_val;
  wire [269 : 0] convert_w$slave_response_get, convert_w$slave_response_peek;
  wire [255 : 0] convert_w$master_WDATA;
  wire [39 : 0] convert_w$master_AWADDR;
  wire [31 : 0] convert_w$master_WSTRB;
  wire [7 : 0] convert_w$master_AWID,
	       convert_w$master_BID,
	       convert_w$master_WID;
  wire [3 : 0] convert_w$master_AWCACHE, convert_w$master_AWLEN;
  wire [2 : 0] convert_w$master_AWPROT, convert_w$master_AWSIZE;
  wire [1 : 0] convert_w$master_AWBURST,
	       convert_w$master_AWLOCK,
	       convert_w$master_BRESP;
  wire convert_w$EN_slave_request_put,
       convert_w$EN_slave_response_get,
       convert_w$RDY_slave_request_put,
       convert_w$RDY_slave_response_get,
       convert_w$RDY_slave_response_peek,
       convert_w$master_AWREADY,
       convert_w$master_AWVALID,
       convert_w$master_BREADY,
       convert_w$master_BVALID,
       convert_w$master_WLAST,
       convert_w$master_WREADY,
       convert_w$master_WVALID,
       convert_w$slave_request_canPut,
       convert_w$slave_response_canGet;

  // rule scheduling signals
  wire WILL_FIRE_RL_get_write_response;

  // remaining internal signals
  reg [2 : 0] CASE_convert_rslave_response_peek_BITS_259_TO_ETC__q1,
	      CASE_convert_wslave_response_peek_BITS_259_TO_ETC__q2,
	      CASE_w_responsewget_BITS_259_TO_258_0_w_respo_ETC__q3;
  reg [1 : 0] CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q4;
  wire [256 : 0] IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d99,
		 IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d100;
  wire [3 : 0] IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d50,
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d57,
	       x__h1609,
	       x__h1760;
  wire [2 : 0] IF_IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_conv_ETC___d93;
  wire [1 : 0] IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d64,
	       IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d65;
  wire IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d73,
       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d80,
       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d88,
       IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d74,
       IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d81,
       IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d89,
       NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_7_A_ETC___d72,
       NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_7_A_ETC___d87,
       NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_OR__ETC___d120;

  // value method slave_request_canPut
  assign slave_request_canPut =
	     convert_r$slave_request_canPut &&
	     convert_w$slave_request_canPut ;

  // action method slave_request_put
  assign RDY_slave_request_put =
	     convert_r$slave_request_canPut &&
	     convert_w$slave_request_canPut &&
	     convert_r$RDY_slave_request_put &&
	     convert_w$RDY_slave_request_put ;

  // value method slave_response_canGet
  assign slave_response_canGet =
	     read_rsp_prio && convert_r$slave_response_canGet ||
	     !read_rsp_prio &&
	     (convert_r$slave_response_canGet ||
	      convert_w$slave_response_canGet) ;

  // value method slave_response_peek
  assign slave_response_peek =
	     { w_response$wget[269:260],
	       CASE_w_responsewget_BITS_259_TO_258_0_w_respo_ETC__q3,
	       w_response$wget[256:0] } ;
  assign RDY_slave_response_peek =
	     read_rsp_prio && convert_r$slave_response_canGet ||
	     !read_rsp_prio &&
	     (convert_r$slave_response_canGet ||
	      convert_w$slave_response_canGet) ;

  // actionvalue method slave_response_get
  assign slave_response_get =
	     { w_response$wget[269:260],
	       CASE_w_responsewget_BITS_259_TO_258_0_w_respo_ETC__q3,
	       w_response$wget[256:0] } ;
  assign RDY_slave_response_get = 1'd1 ;

  // value method read_master_arID
  assign read_master_ARID = convert_r$master_ARID ;

  // value method read_master_arADDR
  assign read_master_ARADDR = convert_r$master_ARADDR ;

  // value method read_master_arLEN
  assign read_master_ARLEN = convert_r$master_ARLEN ;

  // value method read_master_arSIZE
  assign read_master_ARSIZE = convert_r$master_ARSIZE ;

  // value method read_master_arBURST
  assign read_master_ARBURST = convert_r$master_ARBURST ;

  // value method read_master_arLOCK
  assign read_master_ARLOCK = convert_r$master_ARLOCK ;

  // value method read_master_arCACHE
  assign read_master_ARCACHE = convert_r$master_ARCACHE ;

  // value method read_master_arPROT
  assign read_master_ARPROT = convert_r$master_ARPROT ;

  // value method read_master_arVALID
  assign read_master_ARVALID = convert_r$master_ARVALID ;

  // value method read_master_rREADY
  assign read_master_RREADY = convert_r$master_RREADY ;

  // value method write_master_awID
  assign write_master_AWID = convert_w$master_AWID ;

  // value method write_master_awADDR
  assign write_master_AWADDR = convert_w$master_AWADDR ;

  // value method write_master_awLEN
  assign write_master_AWLEN = convert_w$master_AWLEN ;

  // value method write_master_awSIZE
  assign write_master_AWSIZE = convert_w$master_AWSIZE ;

  // value method write_master_awBURST
  assign write_master_AWBURST = convert_w$master_AWBURST ;

  // value method write_master_awLOCK
  assign write_master_AWLOCK = convert_w$master_AWLOCK ;

  // value method write_master_awCACHE
  assign write_master_AWCACHE = convert_w$master_AWCACHE ;

  // value method write_master_awPROT
  assign write_master_AWPROT = convert_w$master_AWPROT ;

  // value method write_master_awVALID
  assign write_master_AWVALID = convert_w$master_AWVALID ;

  // value method write_master_wID
  assign write_master_WID = convert_w$master_WID ;

  // value method write_master_wDATA
  assign write_master_WDATA = convert_w$master_WDATA ;

  // value method write_master_wSTRB
  assign write_master_WSTRB = convert_w$master_WSTRB ;

  // value method write_master_wLAST
  assign write_master_WLAST = convert_w$master_WLAST ;

  // value method write_master_wVALID
  assign write_master_WVALID = convert_w$master_WVALID ;

  // value method write_master_bREADY
  assign write_master_BREADY = convert_w$master_BREADY ;

  // submodule convert_r
  mkInternalToAxiRead convert_r(.CLK(CLK),
				.RST_N(RST_N),
				.master_ARREADY(convert_r$master_ARREADY),
				.master_RDATA(convert_r$master_RDATA),
				.master_RID(convert_r$master_RID),
				.master_RLAST(convert_r$master_RLAST),
				.master_RRESP(convert_r$master_RRESP),
				.master_RVALID(convert_r$master_RVALID),
				.slave_request_put_val(convert_r$slave_request_put_val),
				.EN_slave_request_put(convert_r$EN_slave_request_put),
				.EN_slave_response_get(convert_r$EN_slave_response_get),
				.slave_request_canPut(convert_r$slave_request_canPut),
				.RDY_slave_request_put(convert_r$RDY_slave_request_put),
				.slave_response_canGet(convert_r$slave_response_canGet),
				.slave_response_peek(convert_r$slave_response_peek),
				.RDY_slave_response_peek(convert_r$RDY_slave_response_peek),
				.slave_response_get(),
				.RDY_slave_response_get(convert_r$RDY_slave_response_get),
				.master_ARID(convert_r$master_ARID),
				.master_ARADDR(convert_r$master_ARADDR),
				.master_ARLEN(convert_r$master_ARLEN),
				.master_ARSIZE(convert_r$master_ARSIZE),
				.master_ARBURST(convert_r$master_ARBURST),
				.master_ARLOCK(convert_r$master_ARLOCK),
				.master_ARCACHE(convert_r$master_ARCACHE),
				.master_ARPROT(convert_r$master_ARPROT),
				.master_ARVALID(convert_r$master_ARVALID),
				.master_RREADY(convert_r$master_RREADY));

  // submodule convert_w
  mkInternalToAxiWrite convert_w(.CLK(CLK),
				 .RST_N(RST_N),
				 .master_AWREADY(convert_w$master_AWREADY),
				 .master_BID(convert_w$master_BID),
				 .master_BRESP(convert_w$master_BRESP),
				 .master_BVALID(convert_w$master_BVALID),
				 .master_WREADY(convert_w$master_WREADY),
				 .slave_request_put_val(convert_w$slave_request_put_val),
				 .EN_slave_request_put(convert_w$EN_slave_request_put),
				 .EN_slave_response_get(convert_w$EN_slave_response_get),
				 .slave_request_canPut(convert_w$slave_request_canPut),
				 .RDY_slave_request_put(convert_w$RDY_slave_request_put),
				 .slave_response_canGet(convert_w$slave_response_canGet),
				 .slave_response_peek(convert_w$slave_response_peek),
				 .RDY_slave_response_peek(convert_w$RDY_slave_response_peek),
				 .slave_response_get(convert_w$slave_response_get),
				 .RDY_slave_response_get(convert_w$RDY_slave_response_get),
				 .master_AWID(convert_w$master_AWID),
				 .master_AWADDR(convert_w$master_AWADDR),
				 .master_AWLEN(convert_w$master_AWLEN),
				 .master_AWSIZE(convert_w$master_AWSIZE),
				 .master_AWBURST(convert_w$master_AWBURST),
				 .master_AWLOCK(convert_w$master_AWLOCK),
				 .master_AWCACHE(convert_w$master_AWCACHE),
				 .master_AWPROT(convert_w$master_AWPROT),
				 .master_AWVALID(convert_w$master_AWVALID),
				 .master_WID(convert_w$master_WID),
				 .master_WDATA(convert_w$master_WDATA),
				 .master_WSTRB(convert_w$master_WSTRB),
				 .master_WLAST(convert_w$master_WLAST),
				 .master_WVALID(convert_w$master_WVALID),
				 .master_BREADY(convert_w$master_BREADY));

  // rule RL_get_write_response
  assign WILL_FIRE_RL_get_write_response =
	     convert_w$RDY_slave_response_get && w_get_write_response$whas ;

  // inlined wires
  assign w_read_rsp$wget =
	     { convert_r$slave_response_peek[269:260],
	       CASE_convert_rslave_response_peek_BITS_259_TO_ETC__q1,
	       convert_r$slave_response_peek[256:0] } ;
  assign w_write_rsp$wget =
	     { convert_w$slave_response_peek[269:260],
	       CASE_convert_wslave_response_peek_BITS_259_TO_ETC__q2,
	       convert_w$slave_response_peek[256:0] } ;
  assign w_response$wget =
	     { x__h1609,
	       x__h1760,
	       IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d65,
	       IF_IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_conv_ETC___d93,
	       IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d100 } ;
  assign w_read_rsp_last$whas =
	     convert_r$RDY_slave_response_peek &&
	     (convert_r$slave_response_peek[259:258] != 2'd0 ||
	      convert_r$slave_response_peek[257]) ;
  assign w_get_read_response$whas =
	     EN_slave_response_get &&
	     (read_rsp_prio || last_rsp && convert_r$slave_response_canGet ||
	      !convert_w$slave_response_canGet && !last_rsp &&
	      convert_r$slave_response_canGet) ;
  assign w_get_write_response$whas =
	     EN_slave_response_get && !read_rsp_prio &&
	     (!last_rsp || !convert_r$slave_response_canGet) &&
	     convert_w$slave_response_canGet ;

  // register last_rsp
  assign last_rsp$D_IN =
	     !read_rsp_prio &&
	     (!last_rsp || !convert_r$slave_response_canGet) &&
	     convert_w$slave_response_canGet ;
  assign last_rsp$EN =
	     EN_slave_response_get &&
	     (read_rsp_prio || last_rsp && convert_r$slave_response_canGet ||
	      convert_w$slave_response_canGet ||
	      !last_rsp && convert_r$slave_response_canGet) ;

  // register read_rsp_prio
  assign read_rsp_prio$D_IN = !w_read_rsp_last$whas ;
  assign read_rsp_prio$EN = w_get_read_response$whas ;

  // submodule convert_r
  assign convert_r$master_ARREADY = read_master_ARREADY ;
  assign convert_r$master_RDATA = read_master_RDATA ;
  assign convert_r$master_RID = read_master_RID ;
  assign convert_r$master_RLAST = read_master_RLAST ;
  assign convert_r$master_RRESP = read_master_RRESP ;
  assign convert_r$master_RVALID = read_master_RVALID ;
  assign convert_r$slave_request_put_val =
	     { slave_request_put_val[349:302],
	       CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q4,
	       slave_request_put_val[299:0] } ;
  assign convert_r$EN_slave_request_put =
	     EN_slave_request_put && slave_request_put_val[301:300] == 2'd0 ;
  assign convert_r$EN_slave_response_get =
	     convert_r$RDY_slave_response_get && w_get_read_response$whas ;

  // submodule convert_w
  assign convert_w$master_AWREADY = write_master_AWREADY ;
  assign convert_w$master_BID = write_master_BID ;
  assign convert_w$master_BRESP = write_master_BRESP ;
  assign convert_w$master_BVALID = write_master_BVALID ;
  assign convert_w$master_WREADY = write_master_WREADY ;
  assign convert_w$slave_request_put_val =
	     { slave_request_put_val[349:302],
	       CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q4,
	       slave_request_put_val[299:0] } ;
  assign convert_w$EN_slave_request_put =
	     EN_slave_request_put && slave_request_put_val[301:300] == 2'd1 ;
  assign convert_w$EN_slave_response_get = WILL_FIRE_RL_get_write_response ;

  // remaining internal signals
  assign IF_IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_conv_ETC___d93 =
	     IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d74 ?
	       { 2'd0,
		 IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d81 } :
	       (IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d89 ?
		  { 2'd1, 1'bx /* unspecified value */  } :
		  { 2'd2,
		    IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d81 }) ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d50 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       w_write_rsp$wget[269:266] :
	       w_read_rsp$wget[269:266] ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d57 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       w_write_rsp$wget[265:262] :
	       w_read_rsp$wget[265:262] ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d64 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       w_write_rsp$wget[261:260] :
	       w_read_rsp$wget[261:260] ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d73 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       convert_w$RDY_slave_response_peek &&
	       w_write_rsp$wget[259:258] == 2'd0 :
	       NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_7_A_ETC___d72 ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d80 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       w_write_rsp$wget[257] :
	       w_read_rsp$wget[257] ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d88 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       convert_w$RDY_slave_response_peek &&
	       w_write_rsp$wget[259:258] == 2'd1 :
	       NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_7_A_ETC___d87 ;
  assign IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d99 =
	     (!read_rsp_prio && convert_w$slave_response_canGet) ?
	       w_write_rsp$wget[256:0] :
	       w_read_rsp$wget[256:0] ;
  assign IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d100 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       w_read_rsp$wget[256:0] :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d99 ;
  assign IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d65 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       w_read_rsp$wget[261:260] :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d64 ;
  assign IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d74 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       convert_r$RDY_slave_response_peek &&
	       w_read_rsp$wget[259:258] == 2'd0 :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d73 ;
  assign IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d81 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       w_read_rsp$wget[257] :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d80 ;
  assign IF_read_rsp_prio_0_OR_last_rsp_1_2_AND_convert_ETC___d89 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       convert_r$RDY_slave_response_peek &&
	       w_read_rsp$wget[259:258] == 2'd1 :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d88 ;
  assign NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_7_A_ETC___d72 =
	     !read_rsp_prio && !last_rsp && convert_r$slave_response_canGet &&
	     convert_r$RDY_slave_response_peek &&
	     w_read_rsp$wget[259:258] == 2'd0 ;
  assign NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_7_A_ETC___d87 =
	     !read_rsp_prio && !last_rsp && convert_r$slave_response_canGet &&
	     convert_r$RDY_slave_response_peek &&
	     w_read_rsp$wget[259:258] == 2'd1 ;
  assign NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_OR__ETC___d120 =
	     !read_rsp_prio &&
	     (!last_rsp || !convert_r$slave_response_canGet) &&
	     !convert_w$slave_response_canGet &&
	     (last_rsp || !convert_r$slave_response_canGet) ;
  assign x__h1609 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       w_read_rsp$wget[269:266] :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d50 ;
  assign x__h1760 =
	     ((read_rsp_prio || last_rsp) &&
	      convert_r$slave_response_canGet) ?
	       w_read_rsp$wget[265:262] :
	       IF_NOT_read_rsp_prio_0_9_AND_convert_w_slave_r_ETC___d57 ;
  always@(convert_r$slave_response_peek)
  begin
    case (convert_r$slave_response_peek[259:258])
      2'd0, 2'd1:
	  CASE_convert_rslave_response_peek_BITS_259_TO_ETC__q1 =
	      convert_r$slave_response_peek[259:257];
      default: CASE_convert_rslave_response_peek_BITS_259_TO_ETC__q1 =
		   { 2'd2, convert_r$slave_response_peek[257] };
    endcase
  end
  always@(convert_w$slave_response_peek)
  begin
    case (convert_w$slave_response_peek[259:258])
      2'd0, 2'd1:
	  CASE_convert_wslave_response_peek_BITS_259_TO_ETC__q2 =
	      convert_w$slave_response_peek[259:257];
      default: CASE_convert_wslave_response_peek_BITS_259_TO_ETC__q2 =
		   { 2'd2, convert_w$slave_response_peek[257] };
    endcase
  end
  always@(w_response$wget)
  begin
    case (w_response$wget[259:258])
      2'd0, 2'd1:
	  CASE_w_responsewget_BITS_259_TO_258_0_w_respo_ETC__q3 =
	      w_response$wget[259:257];
      default: CASE_w_responsewget_BITS_259_TO_258_0_w_respo_ETC__q3 =
		   { 2'd2, w_response$wget[257] };
    endcase
  end
  always@(slave_request_put_val)
  begin
    case (slave_request_put_val[301:300])
      2'd0, 2'd1:
	  CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q4 =
	      slave_request_put_val[301:300];
      default: CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q4 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        last_rsp <= `BSV_ASSIGNMENT_DELAY 1'd1;
	read_rsp_prio <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (last_rsp$EN) last_rsp <= `BSV_ASSIGNMENT_DELAY last_rsp$D_IN;
	if (read_rsp_prio$EN)
	  read_rsp_prio <= `BSV_ASSIGNMENT_DELAY read_rsp_prio$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    last_rsp = 1'h0;
    read_rsp_prio = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_slave_request_put && slave_request_put_val[301:300] != 2'd0 &&
	  slave_request_put_val[301:300] != 2'd1)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalToAxi.bsv\", line 186, column 51\nEvery packet should be either a Read or a Write request");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_slave_request_put && slave_request_put_val[301:300] != 2'd0 &&
	  slave_request_put_val[301:300] != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_slave_response_get &&
	  NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_OR__ETC___d120)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalToAxi.bsv\", line 152, column 35\nThere must be a Read or a Write response");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_slave_response_get &&
	  NOT_read_rsp_prio_0_9_AND_NOT_last_rsp_1_6_OR__ETC___d120)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_get_write_response &&
	  convert_w$slave_response_get[259:258] == 2'd0 &&
	  !convert_w$slave_response_get[257])
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalToAxi.bsv\", line 162, column 42\nWrite responses should be single flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_get_write_response &&
	  convert_w$slave_response_get[259:258] == 2'd0 &&
	  !convert_w$slave_response_get[257])
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkInternalToAxi

