//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
//
// On Sun Mar 22 00:26:09 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// slave_request_canPut           O     1 reg
// RDY_slave_request_put          O     1 reg
// slave_response_canGet          O     1
// slave_response_peek            O   270
// RDY_slave_response_peek        O     1
// slave_response_get             O   270
// RDY_slave_response_get         O     1
// master_request_canGet          O     1
// master_request_peek            O   134
// RDY_master_request_peek        O     1
// master_request_get             O   134
// RDY_master_request_get         O     1
// master_response_canPut         O     1 reg
// RDY_master_response_put        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_request_put_val          I   350
// master_response_put_val        I    78
// EN_slave_request_put           I     1
// EN_master_response_put         I     1
// EN_slave_response_get          I     1
// EN_master_request_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInternalPeripheralBridge(CLK,
				  RST_N,

				  slave_request_canPut,

				  slave_request_put_val,
				  EN_slave_request_put,
				  RDY_slave_request_put,

				  slave_response_canGet,

				  slave_response_peek,
				  RDY_slave_response_peek,

				  EN_slave_response_get,
				  slave_response_get,
				  RDY_slave_response_get,

				  master_request_canGet,

				  master_request_peek,
				  RDY_master_request_peek,

				  EN_master_request_get,
				  master_request_get,
				  RDY_master_request_get,

				  master_response_canPut,

				  master_response_put_val,
				  EN_master_response_put,
				  RDY_master_response_put);
  input  CLK;
  input  RST_N;

  // value method slave_request_canPut
  output slave_request_canPut;

  // action method slave_request_put
  input  [349 : 0] slave_request_put_val;
  input  EN_slave_request_put;
  output RDY_slave_request_put;

  // value method slave_response_canGet
  output slave_response_canGet;

  // value method slave_response_peek
  output [269 : 0] slave_response_peek;
  output RDY_slave_response_peek;

  // actionvalue method slave_response_get
  input  EN_slave_response_get;
  output [269 : 0] slave_response_get;
  output RDY_slave_response_get;

  // value method master_request_canGet
  output master_request_canGet;

  // value method master_request_peek
  output [133 : 0] master_request_peek;
  output RDY_master_request_peek;

  // actionvalue method master_request_get
  input  EN_master_request_get;
  output [133 : 0] master_request_get;
  output RDY_master_request_get;

  // value method master_response_canPut
  output master_response_canPut;

  // action method master_response_put
  input  [77 : 0] master_response_put_val;
  input  EN_master_response_put;
  output RDY_master_response_put;

  // signals for module outputs
  wire [269 : 0] slave_response_get, slave_response_peek;
  wire [133 : 0] master_request_get, master_request_peek;
  wire RDY_master_request_get,
       RDY_master_request_peek,
       RDY_master_response_put,
       RDY_slave_request_put,
       RDY_slave_response_get,
       RDY_slave_response_peek,
       master_request_canGet,
       master_response_canPut,
       slave_request_canPut,
       slave_response_canGet;

  // inlined wires
  reg [134 : 0] master_req_fifo_rv$port0__write_1;
  wire [270 : 0] slave_resp_fifo_rv$port0__write_1,
		 slave_resp_fifo_rv$port1__read,
		 slave_resp_fifo_rv$port1__write_1,
		 slave_resp_fifo_rv$port2__read;
  wire [134 : 0] master_req_fifo_rv$port1__read,
		 master_req_fifo_rv$port1__write_1,
		 master_req_fifo_rv$port2__read;
  wire master_req_fifo_rv$EN_port0__write, slave_resp_fifo_rv$EN_port0__write;

  // register bridge_state
  reg [1 : 0] bridge_state;
  wire [1 : 0] bridge_state$D_IN;
  wire bridge_state$EN;

  // register master_req_fifo_rv
  reg [134 : 0] master_req_fifo_rv;
  wire [134 : 0] master_req_fifo_rv$D_IN;
  wire master_req_fifo_rv$EN;

  // register req_cnt
  reg [2 : 0] req_cnt;
  wire [2 : 0] req_cnt$D_IN;
  wire req_cnt$EN;

  // register resp_cnt
  reg [2 : 0] resp_cnt;
  wire [2 : 0] resp_cnt$D_IN;
  wire resp_cnt$EN;

  // register resp_data
  reg [255 : 0] resp_data;
  wire [255 : 0] resp_data$D_IN;
  wire resp_data$EN;

  // register resp_error
  reg resp_error;
  wire resp_error$D_IN, resp_error$EN;

  // register slave_resp_fifo_rv
  reg [270 : 0] slave_resp_fifo_rv;
  wire [270 : 0] slave_resp_fifo_rv$D_IN;
  wire slave_resp_fifo_rv$EN;

  // register stop_cnt
  reg [2 : 0] stop_cnt;
  wire [2 : 0] stop_cnt$D_IN;
  wire stop_cnt$EN;

  // ports of submodule master_resp_fifo
  wire [77 : 0] master_resp_fifo$D_IN, master_resp_fifo$D_OUT;
  wire master_resp_fifo$CLR,
       master_resp_fifo$DEQ,
       master_resp_fifo$EMPTY_N,
       master_resp_fifo$ENQ,
       master_resp_fifo$FULL_N;

  // ports of submodule slave_req_fifo
  wire [349 : 0] slave_req_fifo$D_IN, slave_req_fifo$D_OUT;
  wire slave_req_fifo$CLR,
       slave_req_fifo$DEQ,
       slave_req_fifo$EMPTY_N,
       slave_req_fifo$ENQ,
       slave_req_fifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_idle,
       WILL_FIRE_RL_read_next,
       WILL_FIRE_RL_read_wait,
       WILL_FIRE_RL_write_next,
       WILL_FIRE_RL_write_wait;

  // inputs to muxes for submodule ports
  wire [270 : 0] MUX_slave_resp_fifo_rv$port0__write_1__VAL_1,
		 MUX_slave_resp_fifo_rv$port0__write_1__VAL_2;
  wire [134 : 0] MUX_master_req_fifo_rv$port0__write_1__VAL_1,
		 MUX_master_req_fifo_rv$port0__write_1__VAL_2,
		 MUX_master_req_fifo_rv$port0__write_1__VAL_3;
  wire [2 : 0] MUX_req_cnt$write_1__VAL_1, MUX_resp_cnt$write_1__VAL_1;
  wire [1 : 0] MUX_bridge_state$write_1__VAL_1;
  wire MUX_bridge_state$write_1__PSEL_2,
       MUX_bridge_state$write_1__SEL_1,
       MUX_req_cnt$write_1__SEL_1,
       MUX_resp_error$write_1__VAL_1,
       MUX_slave_resp_fifo_rv$port0__write_1__SEL_1;

  // remaining internal signals
  reg [3 : 0] x__h2648, x__h2660;
  reg [2 : 0] CASE_master_response_put_val_BITS_67_TO_66_0_m_ETC__q13,
	      CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_1_1_1__ETC__q15,
	      CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_slave__ETC__q10,
	      CASE_slave_resp_fifo_rvport1__read_BITS_259_T_ETC__q11;
  reg [1 : 0] CASE_master_req_fifo_rvport1__read_BITS_85_TO_ETC__q12,
	      CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q14;
  reg CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3,
      CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2,
      CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16;
  wire [255 : 0] IF_slave_req_fifo_first_BITS_314_TO_313_41_PLU_ETC___d159,
		 slave_req_fifoD_OUT_BITS_255_TO_0_AND_INV_0xF_ETC__q1;
  wire [93 : 0] IF_slave_req_fifo_first_BITS_301_TO_300_0_EQ_0_ETC___d108;
  wire [82 : 0] slave_req_fifo_first_BITS_298_TO_297_73_CONCAT_ETC___d232;
  wire [63 : 0] data_data__h14083;
  wire [39 : 0] slave_req_fifo_first_BITS_349_TO_315_3_CONCAT__ETC___d121;
  wire [36 : 0] req64_addr_lineNumber__h2617;
  wire [7 : 0] x__h14193, x__h14195;
  wire [1 : 0] IF_resp_error_60_OR_master_resp_fifo_first__33_ETC___d166,
	       index__h5340;
  wire NOT_req_cnt_11_EQ_stop_cnt_12_13___d114,
       resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165;

  // value method slave_request_canPut
  assign slave_request_canPut = slave_req_fifo$FULL_N ;

  // action method slave_request_put
  assign RDY_slave_request_put = slave_req_fifo$FULL_N ;

  // value method slave_response_canGet
  assign slave_response_canGet = slave_resp_fifo_rv$port1__read[270] ;

  // value method slave_response_peek
  assign slave_response_peek =
	     { slave_resp_fifo_rv$port1__read[269:260],
	       CASE_slave_resp_fifo_rvport1__read_BITS_259_T_ETC__q11,
	       slave_resp_fifo_rv$port1__read[256:0] } ;
  assign RDY_slave_response_peek = slave_resp_fifo_rv$port1__read[270] ;

  // actionvalue method slave_response_get
  assign slave_response_get =
	     { slave_resp_fifo_rv$port1__read[269:260],
	       CASE_slave_resp_fifo_rvport1__read_BITS_259_T_ETC__q11,
	       slave_resp_fifo_rv$port1__read[256:0] } ;
  assign RDY_slave_response_get = slave_resp_fifo_rv$port1__read[270] ;

  // value method master_request_canGet
  assign master_request_canGet = master_req_fifo_rv$port1__read[134] ;

  // value method master_request_peek
  assign master_request_peek =
	     { master_req_fifo_rv$port1__read[133:86],
	       CASE_master_req_fifo_rvport1__read_BITS_85_TO_ETC__q12,
	       master_req_fifo_rv$port1__read[83:0] } ;
  assign RDY_master_request_peek = master_req_fifo_rv$port1__read[134] ;

  // actionvalue method master_request_get
  assign master_request_get =
	     { master_req_fifo_rv$port1__read[133:86],
	       CASE_master_req_fifo_rvport1__read_BITS_85_TO_ETC__q12,
	       master_req_fifo_rv$port1__read[83:0] } ;
  assign RDY_master_request_get = master_req_fifo_rv$port1__read[134] ;

  // value method master_response_canPut
  assign master_response_canPut = master_resp_fifo$FULL_N ;

  // action method master_response_put
  assign RDY_master_response_put = master_resp_fifo$FULL_N ;

  // submodule master_resp_fifo
  FIFO2 #(.width(32'd78), .guarded(32'd1)) master_resp_fifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(master_resp_fifo$D_IN),
							    .ENQ(master_resp_fifo$ENQ),
							    .DEQ(master_resp_fifo$DEQ),
							    .CLR(master_resp_fifo$CLR),
							    .D_OUT(master_resp_fifo$D_OUT),
							    .FULL_N(master_resp_fifo$FULL_N),
							    .EMPTY_N(master_resp_fifo$EMPTY_N));

  // submodule slave_req_fifo
  FIFO1 #(.width(32'd350), .guarded(32'd1)) slave_req_fifo(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(slave_req_fifo$D_IN),
							   .ENQ(slave_req_fifo$ENQ),
							   .DEQ(slave_req_fifo$DEQ),
							   .CLR(slave_req_fifo$CLR),
							   .D_OUT(slave_req_fifo$D_OUT),
							   .FULL_N(slave_req_fifo$FULL_N),
							   .EMPTY_N(slave_req_fifo$EMPTY_N));

  // rule RL_idle
  assign WILL_FIRE_RL_idle =
	     slave_req_fifo$EMPTY_N && !master_req_fifo_rv[134] &&
	     bridge_state == 2'd0 ;

  // rule RL_read_next
  assign WILL_FIRE_RL_read_next =
	     slave_req_fifo$EMPTY_N && !master_req_fifo_rv[134] &&
	     slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	     bridge_state == 2'd1 &&
	     NOT_req_cnt_11_EQ_stop_cnt_12_13___d114 ;

  // rule RL_read_wait
  assign WILL_FIRE_RL_read_wait =
	     slave_req_fifo$EMPTY_N && master_resp_fifo$EMPTY_N &&
	     !slave_resp_fifo_rv[270] &&
	     master_resp_fifo$D_OUT[67:66] == 2'd0 &&
	     slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	     bridge_state == 2'd1 ;

  // rule RL_write_next
  assign WILL_FIRE_RL_write_next =
	     slave_req_fifo$EMPTY_N && !master_req_fifo_rv[134] &&
	     slave_req_fifo$D_OUT[301:300] == 2'd1 &&
	     bridge_state == 2'd2 &&
	     NOT_req_cnt_11_EQ_stop_cnt_12_13___d114 ;

  // rule RL_write_wait
  assign WILL_FIRE_RL_write_wait =
	     master_resp_fifo$EMPTY_N && slave_req_fifo$EMPTY_N &&
	     !slave_resp_fifo_rv[270] &&
	     bridge_state == 2'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_bridge_state$write_1__SEL_1 =
	     WILL_FIRE_RL_idle &&
	     (slave_req_fifo$D_OUT[301:300] == 2'd0 ||
	      slave_req_fifo$D_OUT[301:300] == 2'd1) ;
  assign MUX_bridge_state$write_1__PSEL_2 =
	     WILL_FIRE_RL_write_wait || WILL_FIRE_RL_read_wait ;
  assign MUX_req_cnt$write_1__SEL_1 =
	     WILL_FIRE_RL_write_next || WILL_FIRE_RL_read_next ;
  assign MUX_slave_resp_fifo_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_read_wait &&
	     resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165 ;
  assign MUX_bridge_state$write_1__VAL_1 =
	     (slave_req_fifo$D_OUT[301:300] == 2'd0) ? 2'd1 : 2'd2 ;
  assign MUX_master_req_fifo_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       (slave_req_fifo$D_OUT[301:300] == 2'd0) ?
		 slave_req_fifo$D_OUT[349:310] :
		 { (slave_req_fifo$D_OUT[301:300] == 2'd1) ?
		     req64_addr_lineNumber__h2617 :
		     37'd0,
		   3'd0 },
	       IF_slave_req_fifo_first_BITS_301_TO_300_0_EQ_0_ETC___d108 } ;
  assign MUX_master_req_fifo_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       slave_req_fifo_first_BITS_349_TO_315_3_CONCAT__ETC___d121,
	       slave_req_fifo$D_OUT[309:302],
	       2'd0,
	       76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       slave_req_fifo$D_OUT[7:6],
	       6'd3 } ;
  assign MUX_master_req_fifo_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       slave_req_fifo_first_BITS_349_TO_315_3_CONCAT__ETC___d121,
	       slave_req_fifo$D_OUT[309:302],
	       3'd3,
	       slave_req_fifo_first_BITS_298_TO_297_73_CONCAT_ETC___d232 } ;
  assign MUX_req_cnt$write_1__VAL_1 = req_cnt + 3'd1 ;
  assign MUX_resp_cnt$write_1__VAL_1 = resp_cnt + 3'd1 ;
  assign MUX_resp_error$write_1__VAL_1 =
	     resp_error || master_resp_fifo$D_OUT[69:68] == 2'd2 ;
  assign MUX_slave_resp_fifo_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       slave_req_fifo$D_OUT[309:302],
	       IF_resp_error_60_OR_master_resp_fifo_first__33_ETC___d166,
	       4'd2,
	       IF_slave_req_fifo_first_BITS_314_TO_313_41_PLU_ETC___d159 } ;
  assign MUX_slave_resp_fifo_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       slave_req_fifo$D_OUT[309:302],
	       IF_resp_error_60_OR_master_resp_fifo_first__33_ETC___d166,
	       2'd1,
	       1'bx /* unspecified value */ ,
	       257'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;

  // inlined wires
  assign slave_resp_fifo_rv$EN_port0__write =
	     WILL_FIRE_RL_read_wait &&
	     resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165 ||
	     WILL_FIRE_RL_write_wait &&
	     resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165 ;
  assign slave_resp_fifo_rv$port0__write_1 =
	     MUX_slave_resp_fifo_rv$port0__write_1__SEL_1 ?
	       MUX_slave_resp_fifo_rv$port0__write_1__VAL_1 :
	       MUX_slave_resp_fifo_rv$port0__write_1__VAL_2 ;
  assign slave_resp_fifo_rv$port1__read =
	     slave_resp_fifo_rv$EN_port0__write ?
	       slave_resp_fifo_rv$port0__write_1 :
	       slave_resp_fifo_rv ;
  assign slave_resp_fifo_rv$port1__write_1 =
	     { 1'd0,
	       270'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign slave_resp_fifo_rv$port2__read =
	     EN_slave_response_get ?
	       slave_resp_fifo_rv$port1__write_1 :
	       slave_resp_fifo_rv$port1__read ;
  assign master_req_fifo_rv$EN_port0__write =
	     WILL_FIRE_RL_idle || WILL_FIRE_RL_read_next ||
	     WILL_FIRE_RL_write_next ;
  always@(WILL_FIRE_RL_idle or
	  MUX_master_req_fifo_rv$port0__write_1__VAL_1 or
	  WILL_FIRE_RL_read_next or
	  MUX_master_req_fifo_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_write_next or
	  MUX_master_req_fifo_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle:
	  master_req_fifo_rv$port0__write_1 =
	      MUX_master_req_fifo_rv$port0__write_1__VAL_1;
      WILL_FIRE_RL_read_next:
	  master_req_fifo_rv$port0__write_1 =
	      MUX_master_req_fifo_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_write_next:
	  master_req_fifo_rv$port0__write_1 =
	      MUX_master_req_fifo_rv$port0__write_1__VAL_3;
      default: master_req_fifo_rv$port0__write_1 =
		   135'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign master_req_fifo_rv$port1__read =
	     master_req_fifo_rv$EN_port0__write ?
	       master_req_fifo_rv$port0__write_1 :
	       master_req_fifo_rv ;
  assign master_req_fifo_rv$port1__write_1 =
	     { 1'd0,
	       134'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign master_req_fifo_rv$port2__read =
	     EN_master_request_get ?
	       master_req_fifo_rv$port1__write_1 :
	       master_req_fifo_rv$port1__read ;

  // register bridge_state
  assign bridge_state$D_IN =
	     MUX_bridge_state$write_1__SEL_1 ?
	       MUX_bridge_state$write_1__VAL_1 :
	       2'd0 ;
  assign bridge_state$EN =
	     WILL_FIRE_RL_idle &&
	     (slave_req_fifo$D_OUT[301:300] == 2'd0 ||
	      slave_req_fifo$D_OUT[301:300] == 2'd1) ||
	     (WILL_FIRE_RL_write_wait || WILL_FIRE_RL_read_wait) &&
	     resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165 ;

  // register master_req_fifo_rv
  assign master_req_fifo_rv$D_IN = master_req_fifo_rv$port2__read ;
  assign master_req_fifo_rv$EN = 1'b1 ;

  // register req_cnt
  assign req_cnt$D_IN =
	     MUX_req_cnt$write_1__SEL_1 ? MUX_req_cnt$write_1__VAL_1 : 3'd1 ;
  assign req_cnt$EN =
	     WILL_FIRE_RL_write_next || WILL_FIRE_RL_read_next ||
	     WILL_FIRE_RL_idle ;

  // register resp_cnt
  assign resp_cnt$D_IN =
	     MUX_bridge_state$write_1__PSEL_2 ?
	       MUX_resp_cnt$write_1__VAL_1 :
	       3'd0 ;
  assign resp_cnt$EN =
	     WILL_FIRE_RL_write_wait || WILL_FIRE_RL_read_wait ||
	     WILL_FIRE_RL_idle ;

  // register resp_data
  assign resp_data$D_IN =
	     WILL_FIRE_RL_read_wait ?
	       IF_slave_req_fifo_first_BITS_314_TO_313_41_PLU_ETC___d159 :
	       256'd0 ;
  assign resp_data$EN = WILL_FIRE_RL_read_wait || WILL_FIRE_RL_idle ;

  // register resp_error
  assign resp_error$D_IN =
	     MUX_bridge_state$write_1__PSEL_2 &&
	     MUX_resp_error$write_1__VAL_1 ;
  assign resp_error$EN =
	     WILL_FIRE_RL_write_wait || WILL_FIRE_RL_read_wait ||
	     WILL_FIRE_RL_idle ;

  // register slave_resp_fifo_rv
  assign slave_resp_fifo_rv$D_IN = slave_resp_fifo_rv$port2__read ;
  assign slave_resp_fifo_rv$EN = 1'b1 ;

  // register stop_cnt
  assign stop_cnt$D_IN =
	     (slave_req_fifo$D_OUT[301:300] == 2'd0) ?
	       CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_1_1_1__ETC__q15 :
	       3'd4 ;
  assign stop_cnt$EN =
	     WILL_FIRE_RL_idle &&
	     (slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	      (slave_req_fifo$D_OUT[2:0] == 3'd0 ||
	       slave_req_fifo$D_OUT[2:0] == 3'd1 ||
	       slave_req_fifo$D_OUT[2:0] == 3'd2 ||
	       slave_req_fifo$D_OUT[2:0] == 3'd3 ||
	       slave_req_fifo$D_OUT[2:0] == 3'd4 ||
	       slave_req_fifo$D_OUT[2:0] == 3'd5) ||
	      slave_req_fifo$D_OUT[301:300] == 2'd1) ;

  // submodule master_resp_fifo
  assign master_resp_fifo$D_IN =
	     { master_response_put_val[77:68],
	       CASE_master_response_put_val_BITS_67_TO_66_0_m_ETC__q13,
	       master_response_put_val[64:0] } ;
  assign master_resp_fifo$ENQ = EN_master_response_put ;
  assign master_resp_fifo$DEQ = MUX_bridge_state$write_1__PSEL_2 ;
  assign master_resp_fifo$CLR = 1'b0 ;

  // submodule slave_req_fifo
  assign slave_req_fifo$D_IN =
	     { slave_request_put_val[349:302],
	       CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q14,
	       slave_request_put_val[299:0] } ;
  assign slave_req_fifo$ENQ = EN_slave_request_put ;
  assign slave_req_fifo$DEQ =
	     MUX_bridge_state$write_1__PSEL_2 &&
	     resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165 ;
  assign slave_req_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_resp_error_60_OR_master_resp_fifo_first__33_ETC___d166 =
	     (resp_error || master_resp_fifo$D_OUT[69:68] == 2'd2) ?
	       2'd2 :
	       2'd0 ;
  assign IF_slave_req_fifo_first_BITS_301_TO_300_0_EQ_0_ETC___d108 =
	     { x__h2648,
	       x__h2660,
	       (slave_req_fifo$D_OUT[301:300] == 2'd1) ?
		 { 3'd3,
		   slave_req_fifo$D_OUT[298:297],
		   slave_req_fifo$D_OUT[272:265],
		   9'd510,
		   slave_req_fifo$D_OUT[63:0] } :
		 { 2'd0,
		   76'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		   slave_req_fifo$D_OUT[301:300] == 2'd0 &&
		   slave_req_fifo$D_OUT[7],
		   slave_req_fifo$D_OUT[301:300] == 2'd0 &&
		   slave_req_fifo$D_OUT[6],
		   3'd0,
		   (slave_req_fifo$D_OUT[301:300] == 2'd0) ?
		     CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_slave__ETC__q10 :
		     3'd0 } } ;
  assign IF_slave_req_fifo_first_BITS_314_TO_313_41_PLU_ETC___d159 =
	     { (index__h5340 == 2'd3) ?
		 master_resp_fifo$D_OUT[63:0] :
		 resp_data[255:192],
	       (index__h5340 == 2'd2) ?
		 master_resp_fifo$D_OUT[63:0] :
		 resp_data[191:128],
	       (index__h5340 == 2'd1) ?
		 master_resp_fifo$D_OUT[63:0] :
		 resp_data[127:64],
	       (index__h5340 == 2'd0) ?
		 master_resp_fifo$D_OUT[63:0] :
		 resp_data[63:0] } ;
  assign NOT_req_cnt_11_EQ_stop_cnt_12_13___d114 = req_cnt != stop_cnt ;
  assign data_data__h14083 =
	     slave_req_fifoD_OUT_BITS_255_TO_0_AND_INV_0xF_ETC__q1[63:0] ;
  assign index__h5340 = slave_req_fifo$D_OUT[314:313] + resp_cnt[1:0] ;
  assign req64_addr_lineNumber__h2617 =
	     { slave_req_fifo$D_OUT[349:315], 2'd0 } ;
  assign resp_cnt_39_EQ_stop_cnt_12_MINUS_1_64___d165 =
	     resp_cnt == stop_cnt - 3'd1 ;
  assign slave_req_fifoD_OUT_BITS_255_TO_0_AND_INV_0xF_ETC__q1 =
	     (slave_req_fifo$D_OUT[255:0] &
	      ~(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE <<
		x__h14193)) >>
	     x__h14195 ;
  assign slave_req_fifo_first_BITS_298_TO_297_73_CONCAT_ETC___d232 =
	     { slave_req_fifo$D_OUT[298:297],
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8,
	       CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9,
	       9'd510,
	       data_data__h14083 } ;
  assign slave_req_fifo_first_BITS_349_TO_315_3_CONCAT__ETC___d121 =
	     { slave_req_fifo$D_OUT[349:315], 5'd0 } +
	     { 34'd0, req_cnt, 3'd0 } ;
  assign x__h14193 = { req_cnt[1:0], 6'd63 } ;
  assign x__h14195 = { req_cnt[1:0], 6'd0 } ;
  always@(slave_req_fifo$D_OUT)
  begin
    case (slave_req_fifo$D_OUT[301:300])
      2'd0, 2'd1: x__h2648 = slave_req_fifo$D_OUT[309:306];
      default: x__h2648 = 4'd0;
    endcase
  end
  always@(slave_req_fifo$D_OUT)
  begin
    case (slave_req_fifo$D_OUT[301:300])
      2'd0, 2'd1: x__h2660 = slave_req_fifo$D_OUT[305:302];
      default: x__h2660 = 4'd0;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2 =
	      slave_req_fifo$D_OUT[272];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2 =
	      slave_req_fifo$D_OUT[280];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2 =
	      slave_req_fifo$D_OUT[288];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2 =
	      slave_req_fifo$D_OUT[296];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_272_1__ETC__q2 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3 =
	      slave_req_fifo$D_OUT[271];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3 =
	      slave_req_fifo$D_OUT[279];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3 =
	      slave_req_fifo$D_OUT[287];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3 =
	      slave_req_fifo$D_OUT[295];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_271_1__ETC__q3 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4 =
	      slave_req_fifo$D_OUT[270];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4 =
	      slave_req_fifo$D_OUT[278];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4 =
	      slave_req_fifo$D_OUT[286];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4 =
	      slave_req_fifo$D_OUT[294];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_270_1__ETC__q4 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5 =
	      slave_req_fifo$D_OUT[269];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5 =
	      slave_req_fifo$D_OUT[277];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5 =
	      slave_req_fifo$D_OUT[285];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5 =
	      slave_req_fifo$D_OUT[293];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_269_1__ETC__q5 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6 =
	      slave_req_fifo$D_OUT[268];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6 =
	      slave_req_fifo$D_OUT[276];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6 =
	      slave_req_fifo$D_OUT[284];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6 =
	      slave_req_fifo$D_OUT[292];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_268_1__ETC__q6 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7 =
	      slave_req_fifo$D_OUT[267];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7 =
	      slave_req_fifo$D_OUT[275];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7 =
	      slave_req_fifo$D_OUT[283];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7 =
	      slave_req_fifo$D_OUT[291];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_267_1__ETC__q7 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8 =
	      slave_req_fifo$D_OUT[266];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8 =
	      slave_req_fifo$D_OUT[274];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8 =
	      slave_req_fifo$D_OUT[282];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8 =
	      slave_req_fifo$D_OUT[290];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_266_1__ETC__q8 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(req_cnt or slave_req_fifo$D_OUT)
  begin
    case (req_cnt)
      3'd0:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9 =
	      slave_req_fifo$D_OUT[265];
      3'd1:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9 =
	      slave_req_fifo$D_OUT[273];
      3'd2:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9 =
	      slave_req_fifo$D_OUT[281];
      3'd3:
	  CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9 =
	      slave_req_fifo$D_OUT[289];
      default: CASE_req_cnt_0_slave_req_fifoD_OUT_BIT_265_1__ETC__q9 =
		   1'bx /* unspecified value */ ;
    endcase
  end
  always@(slave_req_fifo$D_OUT)
  begin
    case (slave_req_fifo$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_slave__ETC__q10 =
	      slave_req_fifo$D_OUT[2:0];
      default: CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_slave__ETC__q10 = 3'd3;
    endcase
  end
  always@(slave_resp_fifo_rv$port1__read)
  begin
    case (slave_resp_fifo_rv$port1__read[259:258])
      2'd0, 2'd1:
	  CASE_slave_resp_fifo_rvport1__read_BITS_259_T_ETC__q11 =
	      slave_resp_fifo_rv$port1__read[259:257];
      default: CASE_slave_resp_fifo_rvport1__read_BITS_259_T_ETC__q11 =
		   { 2'd2, slave_resp_fifo_rv$port1__read[257] };
    endcase
  end
  always@(master_req_fifo_rv$port1__read)
  begin
    case (master_req_fifo_rv$port1__read[85:84])
      2'd0, 2'd1:
	  CASE_master_req_fifo_rvport1__read_BITS_85_TO_ETC__q12 =
	      master_req_fifo_rv$port1__read[85:84];
      default: CASE_master_req_fifo_rvport1__read_BITS_85_TO_ETC__q12 = 2'd2;
    endcase
  end
  always@(master_response_put_val)
  begin
    case (master_response_put_val[67:66])
      2'd0, 2'd1:
	  CASE_master_response_put_val_BITS_67_TO_66_0_m_ETC__q13 =
	      master_response_put_val[67:65];
      default: CASE_master_response_put_val_BITS_67_TO_66_0_m_ETC__q13 =
		   { 2'd2, master_response_put_val[65] };
    endcase
  end
  always@(slave_request_put_val)
  begin
    case (slave_request_put_val[301:300])
      2'd0, 2'd1:
	  CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q14 =
	      slave_request_put_val[301:300];
      default: CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q14 = 2'd2;
    endcase
  end
  always@(slave_req_fifo$D_OUT)
  begin
    case (slave_req_fifo$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_1_1_1__ETC__q15 = 3'd1;
      3'd4: CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_1_1_1__ETC__q15 = 3'd2;
      default: CASE_slave_req_fifoD_OUT_BITS_2_TO_0_0_1_1_1__ETC__q15 = 3'd4;
    endcase
  end
  always@(slave_req_fifo$D_OUT)
  begin
    case (slave_req_fifo$D_OUT[2:0])
      3'd1:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
	      slave_req_fifo$D_OUT[310];
      3'd2:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
	      slave_req_fifo$D_OUT[311:310] != 2'd0;
      3'd3:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
	      slave_req_fifo$D_OUT[312:310] != 3'd0;
      3'd4:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
	      slave_req_fifo$D_OUT[313:310] != 4'd0;
      3'd5:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
	      slave_req_fifo$D_OUT[314:310] != 5'd0;
      3'd6:
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
	      slave_req_fifo$D_OUT[315:310] != 6'd0;
      default: CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16 =
		   slave_req_fifo$D_OUT[316:310] != 7'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bridge_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	master_req_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      134'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	req_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	resp_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	resp_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_resp_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      270'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	stop_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (bridge_state$EN)
	  bridge_state <= `BSV_ASSIGNMENT_DELAY bridge_state$D_IN;
	if (master_req_fifo_rv$EN)
	  master_req_fifo_rv <= `BSV_ASSIGNMENT_DELAY master_req_fifo_rv$D_IN;
	if (req_cnt$EN) req_cnt <= `BSV_ASSIGNMENT_DELAY req_cnt$D_IN;
	if (resp_cnt$EN) resp_cnt <= `BSV_ASSIGNMENT_DELAY resp_cnt$D_IN;
	if (resp_error$EN)
	  resp_error <= `BSV_ASSIGNMENT_DELAY resp_error$D_IN;
	if (slave_resp_fifo_rv$EN)
	  slave_resp_fifo_rv <= `BSV_ASSIGNMENT_DELAY slave_resp_fifo_rv$D_IN;
	if (stop_cnt$EN) stop_cnt <= `BSV_ASSIGNMENT_DELAY stop_cnt$D_IN;
      end
    if (resp_data$EN) resp_data <= `BSV_ASSIGNMENT_DELAY resp_data$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bridge_state = 2'h2;
    master_req_fifo_rv = 135'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    req_cnt = 3'h2;
    resp_cnt = 3'h2;
    resp_data =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    resp_error = 1'h0;
    slave_resp_fifo_rv =
	271'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stop_cnt = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd0 &&
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalPeriphBridge.bsv\", line 95, column 43\nUnaligned accesses not supported");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd0 &&
	  CASE_slave_req_fifoD_OUT_BITS_2_TO_0_1_slave__ETC__q16)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	  slave_req_fifo$D_OUT[5:3] != 3'd0)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalPeriphBridge.bsv\", line 99, column 51\nBurst not supported");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	  slave_req_fifo$D_OUT[5:3] != 3'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd0 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd1 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd2 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd3 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd4 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd5)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalPeriphBridge.bsv\", line 109, column 46\nFlit width not supported");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd0 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd0 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd1 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd2 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd3 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd4 &&
	  slave_req_fifo$D_OUT[2:0] != 3'd5)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd1 &&
	  !slave_req_fifo$D_OUT[299])
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalPeriphBridge.bsv\", line 123, column 41\nBurst not supported");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] == 2'd1 &&
	  !slave_req_fifo$D_OUT[299])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] != 2'd0 &&
	  slave_req_fifo$D_OUT[301:300] != 2'd1)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalPeriphBridge.bsv\", line 144, column 38\nOnly Read and Write requests are supported");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_idle && slave_req_fifo$D_OUT[301:300] != 2'd0 &&
	  slave_req_fifo$D_OUT[301:300] != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write_wait && master_resp_fifo$D_OUT[67:66] == 2'd0)
	$display("Dynamic assertion failed: \"../../cherilibs/trunk/InternalPeriphBridge.bsv\", line 259, column 78\nExpecting write response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write_wait && master_resp_fifo$D_OUT[67:66] == 2'd0)
	$finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkInternalPeripheralBridge

