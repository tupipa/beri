//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
//
// On Sun Mar 22 01:21:12 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// axm_memory_AWID                O     8
// axm_memory_AWADDR              O    40 reg
// axm_memory_AWLEN               O     4
// axm_memory_AWSIZE              O     3
// axm_memory_AWBURST             O     2
// axm_memory_AWLOCK              O     2
// axm_memory_AWCACHE             O     4
// axm_memory_AWPROT              O     3
// axm_memory_AWVALID             O     1 reg
// axm_memory_WID                 O     8
// axm_memory_WDATA               O   256 reg
// axm_memory_WSTRB               O    32
// axm_memory_WLAST               O     1
// axm_memory_WVALID              O     1 reg
// axm_memory_BREADY              O     1 reg
// axm_memory_ARID                O     8
// axm_memory_ARADDR              O    40
// axm_memory_ARLEN               O     4
// axm_memory_ARSIZE              O     3
// axm_memory_ARBURST             O     2
// axm_memory_ARLOCK              O     2
// axm_memory_ARCACHE             O     4
// axm_memory_ARPROT              O     3
// axm_memory_ARVALID             O     1 reg
// axm_memory_RREADY              O     1 reg
// debug_stream_sinks_0_stream_in_ready  O     1
// debug_stream_sources_0_stream_out_data  O     8
// debug_stream_sources_0_stream_out_valid  O     1
// reset_n_out                    O     1 reg
// csi_clockreset_clk             I     1 clock
// csi_clockreset_reset_n         I     1 reset
// axm_memory_AWREADY             I     1
// axm_memory_WREADY              I     1
// axm_memory_BID                 I     8 reg
// axm_memory_BRESP               I     2
// axm_memory_BVALID              I     1
// axm_memory_ARREADY             I     1
// axm_memory_RID                 I     8 reg
// axm_memory_RDATA               I   256 reg
// axm_memory_RRESP               I     2
// axm_memory_RLAST               I     1 reg
// axm_memory_RVALID              I     1
// debug_stream_sinks_0_stream_in_data  I     8
// debug_stream_sinks_0_stream_in_valid  I     1
// debug_stream_sources_0_stream_out_ready  I     1
// irq_irqs                       I    32 reg
//
// Combinational paths from inputs to outputs:
//   debug_stream_sources_0_stream_out_ready -> debug_stream_sources_0_stream_out_data
//   debug_stream_sources_0_stream_out_ready -> debug_stream_sources_0_stream_out_valid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTopAxi(csi_clockreset_clk,
		csi_clockreset_reset_n,

		axm_memory_AWID,

		axm_memory_AWADDR,

		axm_memory_AWLEN,

		axm_memory_AWSIZE,

		axm_memory_AWBURST,

		axm_memory_AWLOCK,

		axm_memory_AWCACHE,

		axm_memory_AWPROT,

		axm_memory_AWVALID,

		axm_memory_AWREADY,

		axm_memory_WID,

		axm_memory_WDATA,

		axm_memory_WSTRB,

		axm_memory_WLAST,

		axm_memory_WVALID,

		axm_memory_WREADY,

		axm_memory_BREADY,

		axm_memory_BID,

		axm_memory_BRESP,

		axm_memory_BVALID,

		axm_memory_ARID,

		axm_memory_ARADDR,

		axm_memory_ARLEN,

		axm_memory_ARSIZE,

		axm_memory_ARBURST,

		axm_memory_ARLOCK,

		axm_memory_ARCACHE,

		axm_memory_ARPROT,

		axm_memory_ARVALID,

		axm_memory_ARREADY,

		axm_memory_RREADY,

		axm_memory_RID,

		axm_memory_RDATA,

		axm_memory_RRESP,

		axm_memory_RLAST,

		axm_memory_RVALID,

		debug_stream_sinks_0_stream_in_data,
		debug_stream_sinks_0_stream_in_valid,

		debug_stream_sinks_0_stream_in_ready,

		debug_stream_sources_0_stream_out_data,

		debug_stream_sources_0_stream_out_valid,

		debug_stream_sources_0_stream_out_ready,

		irq_irqs,

		reset_n_out);
  input  csi_clockreset_clk;
  input  csi_clockreset_reset_n;

  // value method write_master_awID
  output [7 : 0] axm_memory_AWID;

  // value method write_master_awADDR
  output [39 : 0] axm_memory_AWADDR;

  // value method write_master_awLEN
  output [3 : 0] axm_memory_AWLEN;

  // value method write_master_awSIZE
  output [2 : 0] axm_memory_AWSIZE;

  // value method write_master_awBURST
  output [1 : 0] axm_memory_AWBURST;

  // value method write_master_awLOCK
  output [1 : 0] axm_memory_AWLOCK;

  // value method write_master_awCACHE
  output [3 : 0] axm_memory_AWCACHE;

  // value method write_master_awPROT
  output [2 : 0] axm_memory_AWPROT;

  // value method write_master_awVALID
  output axm_memory_AWVALID;

  // action method write_master_awREADY
  input  axm_memory_AWREADY;

  // value method write_master_wID
  output [7 : 0] axm_memory_WID;

  // value method write_master_wDATA
  output [255 : 0] axm_memory_WDATA;

  // value method write_master_wSTRB
  output [31 : 0] axm_memory_WSTRB;

  // value method write_master_wLAST
  output axm_memory_WLAST;

  // value method write_master_wVALID
  output axm_memory_WVALID;

  // action method write_master_wREADY
  input  axm_memory_WREADY;

  // value method write_master_bREADY
  output axm_memory_BREADY;

  // action method write_master_bID
  input  [7 : 0] axm_memory_BID;

  // action method write_master_bRESP
  input  [1 : 0] axm_memory_BRESP;

  // action method write_master_bVALID
  input  axm_memory_BVALID;

  // value method read_master_arID
  output [7 : 0] axm_memory_ARID;

  // value method read_master_arADDR
  output [39 : 0] axm_memory_ARADDR;

  // value method read_master_arLEN
  output [3 : 0] axm_memory_ARLEN;

  // value method read_master_arSIZE
  output [2 : 0] axm_memory_ARSIZE;

  // value method read_master_arBURST
  output [1 : 0] axm_memory_ARBURST;

  // value method read_master_arLOCK
  output [1 : 0] axm_memory_ARLOCK;

  // value method read_master_arCACHE
  output [3 : 0] axm_memory_ARCACHE;

  // value method read_master_arPROT
  output [2 : 0] axm_memory_ARPROT;

  // value method read_master_arVALID
  output axm_memory_ARVALID;

  // action method read_master_arREADY
  input  axm_memory_ARREADY;

  // value method read_master_rREADY
  output axm_memory_RREADY;

  // action method read_master_rID
  input  [7 : 0] axm_memory_RID;

  // action method read_master_rDATA
  input  [255 : 0] axm_memory_RDATA;

  // action method read_master_rRESP
  input  [1 : 0] axm_memory_RRESP;

  // action method read_master_rLAST
  input  axm_memory_RLAST;

  // action method read_master_rVALID
  input  axm_memory_RVALID;

  // action method debug_stream_sinks_0_stream_in
  input  [7 : 0] debug_stream_sinks_0_stream_in_data;
  input  debug_stream_sinks_0_stream_in_valid;

  // value method debug_stream_sinks_0_stream_in_ready
  output debug_stream_sinks_0_stream_in_ready;

  // value method debug_stream_sources_0_stream_out_data
  output [7 : 0] debug_stream_sources_0_stream_out_data;

  // value method debug_stream_sources_0_stream_out_valid
  output debug_stream_sources_0_stream_out_valid;

  // action method debug_stream_sources_0_stream_out
  input  debug_stream_sources_0_stream_out_ready;

  // action method irq
  input  [31 : 0] irq_irqs;

  // value method reset_n_out
  output reset_n_out;

  // signals for module outputs
  wire [255 : 0] axm_memory_WDATA;
  wire [39 : 0] axm_memory_ARADDR, axm_memory_AWADDR;
  wire [31 : 0] axm_memory_WSTRB;
  wire [7 : 0] axm_memory_ARID,
	       axm_memory_AWID,
	       axm_memory_WID,
	       debug_stream_sources_0_stream_out_data;
  wire [3 : 0] axm_memory_ARCACHE,
	       axm_memory_ARLEN,
	       axm_memory_AWCACHE,
	       axm_memory_AWLEN;
  wire [2 : 0] axm_memory_ARPROT,
	       axm_memory_ARSIZE,
	       axm_memory_AWPROT,
	       axm_memory_AWSIZE;
  wire [1 : 0] axm_memory_ARBURST,
	       axm_memory_ARLOCK,
	       axm_memory_AWBURST,
	       axm_memory_AWLOCK;
  wire axm_memory_ARVALID,
       axm_memory_AWVALID,
       axm_memory_BREADY,
       axm_memory_RREADY,
       axm_memory_WLAST,
       axm_memory_WVALID,
       debug_stream_sinks_0_stream_in_ready,
       debug_stream_sources_0_stream_out_valid,
       reset_n_out;

  // inlined wires
  wire [351 : 0] w_to_arbiter_0$wget;
  wire [270 : 0] w_to_arbiter_1_0$wget, w_to_arbiter_1_1$wget;
  wire [134 : 0] w_put_req_0$wget,
		 w_put_req_1$wget,
		 w_put_req_2$wget,
		 w_put_req_3$wget;
  wire [77 : 0] w_peek_rsp_0$wget,
		w_peek_rsp_1$wget,
		w_peek_rsp_2$wget,
		w_peek_rsp_3$wget;
  wire [8 : 0] debugs_0_get_d_dw$wget, debugs_0_put_data_dw$wget;
  wire debugs_0_put_data_dw$whas,
       w_get_0$whas,
       w_get_1_0$whas,
       w_get_1_1$whas,
       w_get_rsp_0$whas,
       w_get_rsp_1$whas,
       w_get_rsp_2$whas,
       w_get_rsp_3$whas,
       w_put_req_0$whas,
       w_put_req_1$whas,
       w_put_req_2$whas,
       w_put_req_3$whas,
       w_to_arbiter_0$whas,
       w_to_arbiter_1_0$whas,
       w_to_arbiter_1_1$whas;

  // register is_allocated
  reg is_allocated;
  wire is_allocated$D_IN, is_allocated$EN;

  // register is_allocated_1
  reg is_allocated_1;
  wire is_allocated_1$D_IN, is_allocated_1$EN;

  // register last_dest
  reg last_dest;
  wire last_dest$D_IN, last_dest$EN;

  // register last_source_1
  reg last_source_1;
  wire last_source_1$D_IN, last_source_1$EN;

  // register qsysIrqs
  reg [31 : 0] qsysIrqs;
  wire [31 : 0] qsysIrqs$D_IN;
  wire qsysIrqs$EN;

  // register req_state
  reg req_state;
  wire req_state$D_IN, req_state$EN;

  // register state
  reg state;
  wire state$D_IN, state$EN;

  // register state_1
  reg state_1;
  wire state_1$D_IN, state_1$EN;

  // ports of submodule axi_translator
  wire [349 : 0] axi_translator$slave_request_put_val;
  wire [269 : 0] axi_translator$slave_response_peek;
  wire [255 : 0] axi_translator$read_master_RDATA,
		 axi_translator$write_master_WDATA;
  wire [39 : 0] axi_translator$read_master_ARADDR,
		axi_translator$write_master_AWADDR;
  wire [31 : 0] axi_translator$write_master_WSTRB;
  wire [7 : 0] axi_translator$read_master_ARID,
	       axi_translator$read_master_RID,
	       axi_translator$write_master_AWID,
	       axi_translator$write_master_BID,
	       axi_translator$write_master_WID;
  wire [3 : 0] axi_translator$read_master_ARCACHE,
	       axi_translator$read_master_ARLEN,
	       axi_translator$write_master_AWCACHE,
	       axi_translator$write_master_AWLEN;
  wire [2 : 0] axi_translator$read_master_ARPROT,
	       axi_translator$read_master_ARSIZE,
	       axi_translator$write_master_AWPROT,
	       axi_translator$write_master_AWSIZE;
  wire [1 : 0] axi_translator$read_master_ARBURST,
	       axi_translator$read_master_ARLOCK,
	       axi_translator$read_master_RRESP,
	       axi_translator$write_master_AWBURST,
	       axi_translator$write_master_AWLOCK,
	       axi_translator$write_master_BRESP;
  wire axi_translator$EN_slave_request_put,
       axi_translator$EN_slave_response_get,
       axi_translator$RDY_slave_request_put,
       axi_translator$RDY_slave_response_get,
       axi_translator$RDY_slave_response_peek,
       axi_translator$read_master_ARREADY,
       axi_translator$read_master_ARVALID,
       axi_translator$read_master_RLAST,
       axi_translator$read_master_RREADY,
       axi_translator$read_master_RVALID,
       axi_translator$slave_request_canPut,
       axi_translator$slave_response_canGet,
       axi_translator$write_master_AWREADY,
       axi_translator$write_master_AWVALID,
       axi_translator$write_master_BREADY,
       axi_translator$write_master_BVALID,
       axi_translator$write_master_WLAST,
       axi_translator$write_master_WREADY,
       axi_translator$write_master_WVALID;

  // ports of submodule bootMem
  wire [133 : 0] bootMem$slave_request_put_val;
  wire [77 : 0] bootMem$slave_response_peek;
  wire bootMem$EN_slave_request_put,
       bootMem$EN_slave_response_get,
       bootMem$RDY_slave_request_put,
       bootMem$RDY_slave_response_get,
       bootMem$RDY_slave_response_peek,
       bootMem$slave_request_canPut,
       bootMem$slave_response_canGet;

  // ports of submodule burster
  wire [349 : 0] burster$master_request_get, burster$slave_request_put_val;
  wire [269 : 0] burster$master_response_put_val, burster$slave_response_peek;
  wire burster$EN_master_request_get,
       burster$EN_master_response_put,
       burster$EN_slave_request_put,
       burster$EN_slave_response_get,
       burster$RDY_master_request_get,
       burster$RDY_master_response_put,
       burster$RDY_slave_request_put,
       burster$RDY_slave_response_get,
       burster$RDY_slave_response_peek,
       burster$slave_request_canPut,
       burster$slave_response_canGet;

  // ports of submodule counter
  wire [133 : 0] counter$slave_request_put_val;
  wire [77 : 0] counter$slave_response_peek;
  wire counter$EN_slave_request_put,
       counter$EN_slave_response_get,
       counter$RDY_slave_request_put,
       counter$RDY_slave_response_get,
       counter$RDY_slave_response_peek,
       counter$slave_request_canPut,
       counter$slave_response_canGet;

  // ports of submodule debugs_0_get_f
  wire [7 : 0] debugs_0_get_f$D_IN, debugs_0_get_f$D_OUT;
  wire debugs_0_get_f$CLR,
       debugs_0_get_f$DEQ,
       debugs_0_get_f$EMPTY_N,
       debugs_0_get_f$ENQ,
       debugs_0_get_f$FULL_N;

  // ports of submodule nullPer
  wire [133 : 0] nullPer$slave_request_put_val;
  wire [77 : 0] nullPer$slave_response_peek;
  wire nullPer$EN_slave_request_put,
       nullPer$EN_slave_response_get,
       nullPer$RDY_slave_request_put,
       nullPer$RDY_slave_response_get,
       nullPer$RDY_slave_response_peek,
       nullPer$slave_request_canPut,
       nullPer$slave_response_canGet;

  // ports of submodule pendingSlave
  wire [1 : 0] pendingSlave$D_IN, pendingSlave$D_OUT;
  wire pendingSlave$CLR,
       pendingSlave$DEQ,
       pendingSlave$EMPTY_N,
       pendingSlave$ENQ,
       pendingSlave$FULL_N;

  // ports of submodule peripheralBridge
  wire [349 : 0] peripheralBridge$slave_request_put_val;
  wire [269 : 0] peripheralBridge$slave_response_get;
  wire [133 : 0] peripheralBridge$master_request_peek;
  wire [77 : 0] peripheralBridge$master_response_put_val;
  wire peripheralBridge$EN_master_request_get,
       peripheralBridge$EN_master_response_put,
       peripheralBridge$EN_slave_request_put,
       peripheralBridge$EN_slave_response_get,
       peripheralBridge$RDY_master_request_get,
       peripheralBridge$RDY_master_request_peek,
       peripheralBridge$RDY_master_response_put,
       peripheralBridge$RDY_slave_request_put,
       peripheralBridge$RDY_slave_response_get;

  // ports of submodule processor
  wire [349 : 0] processor$extMemory_request_peek;
  wire [269 : 0] processor$extMemory_response_put_val;
  wire [133 : 0] processor$pic_0_slave_request_put_val;
  wire [77 : 0] processor$pic_0_slave_response_peek;
  wire [31 : 0] processor$putIrqs_interruptLines;
  wire [7 : 0] processor$debugStream_0_request_put,
	       processor$debugStream_0_response_get;
  wire processor$EN_debugStream_0_request_put,
       processor$EN_debugStream_0_response_get,
       processor$EN_extMemory_request_get,
       processor$EN_extMemory_response_put,
       processor$EN_pic_0_slave_request_put,
       processor$EN_pic_0_slave_response_get,
       processor$RDY_debugStream_0_request_put,
       processor$RDY_debugStream_0_response_get,
       processor$RDY_extMemory_request_get,
       processor$RDY_extMemory_request_peek,
       processor$RDY_extMemory_response_put,
       processor$RDY_pic_0_slave_request_put,
       processor$RDY_pic_0_slave_response_get,
       processor$RDY_pic_0_slave_response_peek,
       processor$extMemory_request_canGet,
       processor$extMemory_response_canPut,
       processor$pic_0_slave_request_canPut,
       processor$pic_0_slave_response_canGet,
       processor$reset_n;

  // rule scheduling signals
  wire WILL_FIRE_RL_arbiter,
       WILL_FIRE_RL_req_send_first_flit,
       WILL_FIRE_RL_req_send_next_flit,
       WILL_FIRE_RL_route_first_flit,
       WILL_FIRE_RL_rsp_receive;

  // inputs to muxes for submodule ports
  wire [351 : 0] MUX_w_to_arbiter_0$wset_1__VAL_1,
		 MUX_w_to_arbiter_0$wset_1__VAL_2;
  wire [134 : 0] MUX_w_put_req_0$wset_1__VAL_1;
  wire MUX_req_state$write_1__SEL_1,
       MUX_req_state$write_1__VAL_1,
       MUX_w_put_req_0$wset_1__SEL_1,
       MUX_w_put_req_1$wset_1__SEL_1,
       MUX_w_put_req_2$wset_1__SEL_1,
       MUX_w_put_req_3$wset_1__SEL_1;

  // remaining internal signals
  reg [255 : 0] CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q12,
		CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q15;
  reg [63 : 0] SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d210;
  reg [3 : 0] x__h20006,
	      x__h20268,
	      x__h63500,
	      x__h63515,
	      x__h64182,
	      x__h64189;
  reg [2 : 0] CASE_axi_translatorslave_response_peek_BITS_2_ETC__q8,
	      CASE_bootMemslave_response_peek_BITS_67_TO_66_ETC__q5,
	      CASE_bursterslave_response_peek_BITS_259_TO_2_ETC__q9,
	      CASE_counterslave_response_peek_BITS_67_TO_66_ETC__q4,
	      CASE_nullPerslave_response_peek_BITS_67_TO_66_ETC__q3,
	      CASE_peripheralBridgeslave_response_get_BITS__ETC__q17,
	      CASE_processorpic_0_slave_response_peek_BITS__ETC__q6;
  reg [1 : 0] CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q10,
	      CASE_burstermaster_request_get_BITS_301_TO_30_ETC__q20,
	      CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q13,
	      CASE_peripheralBridgemaster_request_peek_BITS_ETC__q2,
	      CASE_processorextMemory_request_peek_BITS_301_ETC__q1,
	      CASE_w_put_req_0wget_BITS_85_TO_84_0_w_put_re_ETC__q19,
	      CASE_w_put_req_1wget_BITS_85_TO_84_0_w_put_re_ETC__q18,
	      CASE_w_put_req_2wget_BITS_85_TO_84_0_w_put_re_ETC__q16,
	      CASE_w_put_req_3wget_BITS_85_TO_84_0_w_put_re_ETC__q21,
	      SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d151;
  reg CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q11,
      CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q14,
      CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7,
      SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175,
      SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d200,
      SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d470,
      SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d478,
      SEL_ARR_w_canGet_rsp_0_whas__9_AND_w_canGet_rs_ETC___d112,
      SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66,
      SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d90,
      SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165,
      SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d186,
      SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d438,
      SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d464,
      SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d477,
      SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d506,
      SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d529;
  wire [349 : 0] processor_extMemory_request_peek__07_BITS_349__ETC___d420;
  wire [261 : 0] SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d523,
		 SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d536;
  wire [8 : 0] picNumber__h7819, rawRet__h7965;
  wire [2 : 0] IF_SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rs_ETC___d190,
	       IF_SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to__ETC___d509,
	       IF_SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to__ETC___d532;
  wire [1 : 0] IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51;
  wire IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476,
       IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_to_a_ETC___d450,
       IF_1_MINUS_last_source_1_37_43_THEN_w_to_arbit_ETC___d451,
       IF_1_MINUS_last_source_1_37_43_THEN_w_to_arbit_ETC___d452,
       IF_IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_t_ETC___d454,
       NOT_state_73_96_AND_w_to_arbiter_0_whas__55_AN_ETC___d397,
       _1_MINUS_last_source_1_37___d443,
       _dfoo5,
       _dfoo6,
       state_1_27_AND_SEL_ARR_w_to_arbiter_1_0_whas___ETC___d456,
       state_73_AND_w_to_arbiter_0_whas__55_AND_w_to__ETC___d374;

  // value method write_master_awID
  assign axm_memory_AWID = axi_translator$write_master_AWID ;

  // value method write_master_awADDR
  assign axm_memory_AWADDR = axi_translator$write_master_AWADDR ;

  // value method write_master_awLEN
  assign axm_memory_AWLEN = axi_translator$write_master_AWLEN ;

  // value method write_master_awSIZE
  assign axm_memory_AWSIZE = axi_translator$write_master_AWSIZE ;

  // value method write_master_awBURST
  assign axm_memory_AWBURST = axi_translator$write_master_AWBURST ;

  // value method write_master_awLOCK
  assign axm_memory_AWLOCK = axi_translator$write_master_AWLOCK ;

  // value method write_master_awCACHE
  assign axm_memory_AWCACHE = axi_translator$write_master_AWCACHE ;

  // value method write_master_awPROT
  assign axm_memory_AWPROT = axi_translator$write_master_AWPROT ;

  // value method write_master_awVALID
  assign axm_memory_AWVALID = axi_translator$write_master_AWVALID ;

  // value method write_master_wID
  assign axm_memory_WID = axi_translator$write_master_WID ;

  // value method write_master_wDATA
  assign axm_memory_WDATA = axi_translator$write_master_WDATA ;

  // value method write_master_wSTRB
  assign axm_memory_WSTRB = axi_translator$write_master_WSTRB ;

  // value method write_master_wLAST
  assign axm_memory_WLAST = axi_translator$write_master_WLAST ;

  // value method write_master_wVALID
  assign axm_memory_WVALID = axi_translator$write_master_WVALID ;

  // value method write_master_bREADY
  assign axm_memory_BREADY = axi_translator$write_master_BREADY ;

  // value method read_master_arID
  assign axm_memory_ARID = axi_translator$read_master_ARID ;

  // value method read_master_arADDR
  assign axm_memory_ARADDR = axi_translator$read_master_ARADDR ;

  // value method read_master_arLEN
  assign axm_memory_ARLEN = axi_translator$read_master_ARLEN ;

  // value method read_master_arSIZE
  assign axm_memory_ARSIZE = axi_translator$read_master_ARSIZE ;

  // value method read_master_arBURST
  assign axm_memory_ARBURST = axi_translator$read_master_ARBURST ;

  // value method read_master_arLOCK
  assign axm_memory_ARLOCK = axi_translator$read_master_ARLOCK ;

  // value method read_master_arCACHE
  assign axm_memory_ARCACHE = axi_translator$read_master_ARCACHE ;

  // value method read_master_arPROT
  assign axm_memory_ARPROT = axi_translator$read_master_ARPROT ;

  // value method read_master_arVALID
  assign axm_memory_ARVALID = axi_translator$read_master_ARVALID ;

  // value method read_master_rREADY
  assign axm_memory_RREADY = axi_translator$read_master_RREADY ;

  // value method debug_stream_sinks_0_stream_in_ready
  assign debug_stream_sinks_0_stream_in_ready = debugs_0_get_f$FULL_N ;

  // value method debug_stream_sources_0_stream_out_data
  assign debug_stream_sources_0_stream_out_data =
	     debugs_0_put_data_dw$wget[7:0] ;

  // value method debug_stream_sources_0_stream_out_valid
  assign debug_stream_sources_0_stream_out_valid =
	     debugs_0_put_data_dw$whas && debugs_0_put_data_dw$wget[8] ;

  // value method reset_n_out
  assign reset_n_out = processor$reset_n ;

  // submodule axi_translator
  mkInternalToAxi axi_translator(.CLK(csi_clockreset_clk),
				 .RST_N(csi_clockreset_reset_n),
				 .read_master_ARREADY(axi_translator$read_master_ARREADY),
				 .read_master_RDATA(axi_translator$read_master_RDATA),
				 .read_master_RID(axi_translator$read_master_RID),
				 .read_master_RLAST(axi_translator$read_master_RLAST),
				 .read_master_RRESP(axi_translator$read_master_RRESP),
				 .read_master_RVALID(axi_translator$read_master_RVALID),
				 .slave_request_put_val(axi_translator$slave_request_put_val),
				 .write_master_AWREADY(axi_translator$write_master_AWREADY),
				 .write_master_BID(axi_translator$write_master_BID),
				 .write_master_BRESP(axi_translator$write_master_BRESP),
				 .write_master_BVALID(axi_translator$write_master_BVALID),
				 .write_master_WREADY(axi_translator$write_master_WREADY),
				 .EN_slave_request_put(axi_translator$EN_slave_request_put),
				 .EN_slave_response_get(axi_translator$EN_slave_response_get),
				 .slave_request_canPut(axi_translator$slave_request_canPut),
				 .RDY_slave_request_put(axi_translator$RDY_slave_request_put),
				 .slave_response_canGet(axi_translator$slave_response_canGet),
				 .slave_response_peek(axi_translator$slave_response_peek),
				 .RDY_slave_response_peek(axi_translator$RDY_slave_response_peek),
				 .slave_response_get(),
				 .RDY_slave_response_get(axi_translator$RDY_slave_response_get),
				 .read_master_ARID(axi_translator$read_master_ARID),
				 .read_master_ARADDR(axi_translator$read_master_ARADDR),
				 .read_master_ARLEN(axi_translator$read_master_ARLEN),
				 .read_master_ARSIZE(axi_translator$read_master_ARSIZE),
				 .read_master_ARBURST(axi_translator$read_master_ARBURST),
				 .read_master_ARLOCK(axi_translator$read_master_ARLOCK),
				 .read_master_ARCACHE(axi_translator$read_master_ARCACHE),
				 .read_master_ARPROT(axi_translator$read_master_ARPROT),
				 .read_master_ARVALID(axi_translator$read_master_ARVALID),
				 .read_master_RREADY(axi_translator$read_master_RREADY),
				 .write_master_AWID(axi_translator$write_master_AWID),
				 .write_master_AWADDR(axi_translator$write_master_AWADDR),
				 .write_master_AWLEN(axi_translator$write_master_AWLEN),
				 .write_master_AWSIZE(axi_translator$write_master_AWSIZE),
				 .write_master_AWBURST(axi_translator$write_master_AWBURST),
				 .write_master_AWLOCK(axi_translator$write_master_AWLOCK),
				 .write_master_AWCACHE(axi_translator$write_master_AWCACHE),
				 .write_master_AWPROT(axi_translator$write_master_AWPROT),
				 .write_master_AWVALID(axi_translator$write_master_AWVALID),
				 .write_master_WID(axi_translator$write_master_WID),
				 .write_master_WDATA(axi_translator$write_master_WDATA),
				 .write_master_WSTRB(axi_translator$write_master_WSTRB),
				 .write_master_WLAST(axi_translator$write_master_WLAST),
				 .write_master_WVALID(axi_translator$write_master_WVALID),
				 .write_master_BREADY(axi_translator$write_master_BREADY));

  // submodule bootMem
  mkBootMem bootMem(.CLK(csi_clockreset_clk),
		    .RST_N(csi_clockreset_reset_n),
		    .slave_request_put_val(bootMem$slave_request_put_val),
		    .EN_slave_request_put(bootMem$EN_slave_request_put),
		    .EN_slave_response_get(bootMem$EN_slave_response_get),
		    .slave_request_canPut(bootMem$slave_request_canPut),
		    .RDY_slave_request_put(bootMem$RDY_slave_request_put),
		    .slave_response_canGet(bootMem$slave_response_canGet),
		    .slave_response_peek(bootMem$slave_response_peek),
		    .RDY_slave_response_peek(bootMem$RDY_slave_response_peek),
		    .slave_response_get(),
		    .RDY_slave_response_get(bootMem$RDY_slave_response_get));

  // submodule burster
  mkBurst burster(.CLK(csi_clockreset_clk),
		  .RST_N(csi_clockreset_reset_n),
		  .master_response_put_val(burster$master_response_put_val),
		  .slave_request_put_val(burster$slave_request_put_val),
		  .EN_slave_request_put(burster$EN_slave_request_put),
		  .EN_slave_response_get(burster$EN_slave_response_get),
		  .EN_master_request_get(burster$EN_master_request_get),
		  .EN_master_response_put(burster$EN_master_response_put),
		  .slave_request_canPut(burster$slave_request_canPut),
		  .RDY_slave_request_put(burster$RDY_slave_request_put),
		  .slave_response_canGet(burster$slave_response_canGet),
		  .slave_response_peek(burster$slave_response_peek),
		  .RDY_slave_response_peek(burster$RDY_slave_response_peek),
		  .slave_response_get(),
		  .RDY_slave_response_get(burster$RDY_slave_response_get),
		  .master_request_canGet(),
		  .master_request_peek(),
		  .RDY_master_request_peek(),
		  .master_request_get(burster$master_request_get),
		  .RDY_master_request_get(burster$RDY_master_request_get),
		  .master_response_canPut(),
		  .RDY_master_response_put(burster$RDY_master_response_put));

  // submodule counter
  mkCountPerif counter(.CLK(csi_clockreset_clk),
		       .RST_N(csi_clockreset_reset_n),
		       .slave_request_put_val(counter$slave_request_put_val),
		       .EN_slave_request_put(counter$EN_slave_request_put),
		       .EN_slave_response_get(counter$EN_slave_response_get),
		       .slave_request_canPut(counter$slave_request_canPut),
		       .RDY_slave_request_put(counter$RDY_slave_request_put),
		       .slave_response_canGet(counter$slave_response_canGet),
		       .slave_response_peek(counter$slave_response_peek),
		       .RDY_slave_response_peek(counter$RDY_slave_response_peek),
		       .slave_response_get(),
		       .RDY_slave_response_get(counter$RDY_slave_response_get));

  // submodule debugs_0_get_f
  FIFOL1 #(.width(32'd8)) debugs_0_get_f(.RST(csi_clockreset_reset_n),
					 .CLK(csi_clockreset_clk),
					 .D_IN(debugs_0_get_f$D_IN),
					 .ENQ(debugs_0_get_f$ENQ),
					 .DEQ(debugs_0_get_f$DEQ),
					 .CLR(debugs_0_get_f$CLR),
					 .D_OUT(debugs_0_get_f$D_OUT),
					 .FULL_N(debugs_0_get_f$FULL_N),
					 .EMPTY_N(debugs_0_get_f$EMPTY_N));

  // submodule nullPer
  mkNullPerif nullPer(.CLK(csi_clockreset_clk),
		      .RST_N(csi_clockreset_reset_n),
		      .slave_request_put_val(nullPer$slave_request_put_val),
		      .EN_slave_request_put(nullPer$EN_slave_request_put),
		      .EN_slave_response_get(nullPer$EN_slave_response_get),
		      .slave_request_canPut(nullPer$slave_request_canPut),
		      .RDY_slave_request_put(nullPer$RDY_slave_request_put),
		      .slave_response_canGet(nullPer$slave_response_canGet),
		      .slave_response_peek(nullPer$slave_response_peek),
		      .RDY_slave_response_peek(nullPer$RDY_slave_response_peek),
		      .slave_response_get(),
		      .RDY_slave_response_get(nullPer$RDY_slave_response_get));

  // submodule pendingSlave
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) pendingSlave(.RST(csi_clockreset_reset_n),
					    .CLK(csi_clockreset_clk),
					    .D_IN(pendingSlave$D_IN),
					    .ENQ(pendingSlave$ENQ),
					    .DEQ(pendingSlave$DEQ),
					    .CLR(pendingSlave$CLR),
					    .D_OUT(pendingSlave$D_OUT),
					    .FULL_N(pendingSlave$FULL_N),
					    .EMPTY_N(pendingSlave$EMPTY_N));

  // submodule peripheralBridge
  mkInternalPeripheralBridge peripheralBridge(.CLK(csi_clockreset_clk),
					      .RST_N(csi_clockreset_reset_n),
					      .master_response_put_val(peripheralBridge$master_response_put_val),
					      .slave_request_put_val(peripheralBridge$slave_request_put_val),
					      .EN_slave_request_put(peripheralBridge$EN_slave_request_put),
					      .EN_slave_response_get(peripheralBridge$EN_slave_response_get),
					      .EN_master_request_get(peripheralBridge$EN_master_request_get),
					      .EN_master_response_put(peripheralBridge$EN_master_response_put),
					      .slave_request_canPut(),
					      .RDY_slave_request_put(peripheralBridge$RDY_slave_request_put),
					      .slave_response_canGet(),
					      .slave_response_peek(),
					      .RDY_slave_response_peek(),
					      .slave_response_get(peripheralBridge$slave_response_get),
					      .RDY_slave_response_get(peripheralBridge$RDY_slave_response_get),
					      .master_request_canGet(),
					      .master_request_peek(peripheralBridge$master_request_peek),
					      .RDY_master_request_peek(peripheralBridge$RDY_master_request_peek),
					      .master_request_get(),
					      .RDY_master_request_get(peripheralBridge$RDY_master_request_get),
					      .master_response_canPut(),
					      .RDY_master_response_put(peripheralBridge$RDY_master_response_put));

  // submodule processor
  mkCheri processor(.CLK(csi_clockreset_clk),
		    .RST_N(csi_clockreset_reset_n),
		    .debugStream_0_request_put(processor$debugStream_0_request_put),
		    .extMemory_response_put_val(processor$extMemory_response_put_val),
		    .pic_0_slave_request_put_val(processor$pic_0_slave_request_put_val),
		    .putIrqs_interruptLines(processor$putIrqs_interruptLines),
		    .EN_extMemory_request_get(processor$EN_extMemory_request_get),
		    .EN_extMemory_response_put(processor$EN_extMemory_response_put),
		    .EN_debugStream_0_request_put(processor$EN_debugStream_0_request_put),
		    .EN_debugStream_0_response_get(processor$EN_debugStream_0_response_get),
		    .EN_pic_0_slave_request_put(processor$EN_pic_0_slave_request_put),
		    .EN_pic_0_slave_response_get(processor$EN_pic_0_slave_response_get),
		    .RDY_putIrqs(),
		    .extMemory_request_canGet(processor$extMemory_request_canGet),
		    .extMemory_request_peek(processor$extMemory_request_peek),
		    .RDY_extMemory_request_peek(processor$RDY_extMemory_request_peek),
		    .extMemory_request_get(),
		    .RDY_extMemory_request_get(processor$RDY_extMemory_request_get),
		    .extMemory_response_canPut(processor$extMemory_response_canPut),
		    .RDY_extMemory_response_put(processor$RDY_extMemory_response_put),
		    .RDY_debugStream_0_request_put(processor$RDY_debugStream_0_request_put),
		    .debugStream_0_response_get(processor$debugStream_0_response_get),
		    .RDY_debugStream_0_response_get(processor$RDY_debugStream_0_response_get),
		    .pic_0_slave_request_canPut(processor$pic_0_slave_request_canPut),
		    .RDY_pic_0_slave_request_put(processor$RDY_pic_0_slave_request_put),
		    .pic_0_slave_response_canGet(processor$pic_0_slave_response_canGet),
		    .pic_0_slave_response_peek(processor$pic_0_slave_response_peek),
		    .RDY_pic_0_slave_response_peek(processor$RDY_pic_0_slave_response_peek),
		    .pic_0_slave_response_get(),
		    .RDY_pic_0_slave_response_get(processor$RDY_pic_0_slave_response_get),
		    .reset_n(processor$reset_n),
		    .RDY_reset_n());

  // rule RL_req_send_first_flit
  assign WILL_FIRE_RL_req_send_first_flit =
	     peripheralBridge$RDY_master_request_peek &&
	     peripheralBridge$RDY_master_request_get &&
	     pendingSlave$FULL_N &&
	     !req_state ;

  // rule RL_req_send_next_flit
  assign WILL_FIRE_RL_req_send_next_flit =
	     peripheralBridge$RDY_master_request_peek &&
	     peripheralBridge$RDY_master_request_get &&
	     pendingSlave$EMPTY_N &&
	     req_state &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d90 ;

  // rule RL_rsp_receive
  assign WILL_FIRE_RL_rsp_receive =
	     peripheralBridge$RDY_master_response_put &&
	     pendingSlave$EMPTY_N &&
	     SEL_ARR_w_canGet_rsp_0_whas__9_AND_w_canGet_rs_ETC___d112 ;

  // rule RL_route_first_flit
  assign WILL_FIRE_RL_route_first_flit =
	     processor$RDY_extMemory_request_peek &&
	     processor$extMemory_request_canGet &&
	     !state ;

  // rule RL_arbiter
  assign WILL_FIRE_RL_arbiter =
	     burster$RDY_slave_request_put &&
	     axi_translator$RDY_slave_request_put ;

  // inputs to muxes for submodule ports
  assign MUX_req_state$write_1__SEL_1 =
	     WILL_FIRE_RL_req_send_first_flit &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ;
  assign MUX_w_put_req_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd0 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ;
  assign MUX_w_put_req_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd1 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ;
  assign MUX_w_put_req_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd2 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ;
  assign MUX_w_put_req_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd3 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ;
  assign MUX_req_state$write_1__VAL_1 =
	     peripheralBridge$master_request_peek[85:84] == 2'd1 &&
	     !peripheralBridge$master_request_peek[83] ;
  assign MUX_w_put_req_0$wset_1__VAL_1 =
	     { 1'd1,
	       peripheralBridge$master_request_peek[133:86],
	       CASE_peripheralBridgemaster_request_peek_BITS_ETC__q2,
	       peripheralBridge$master_request_peek[83:0] } ;
  assign MUX_w_to_arbiter_0$wset_1__VAL_1 =
	     { 1'd1,
	       processor_extMemory_request_peek__07_BITS_349__ETC___d420,
	       processor$extMemory_request_peek[340:333] == 8'hFF ||
	       processor$extMemory_request_peek[340:327] == 14'h2000 } ;
  assign MUX_w_to_arbiter_0$wset_1__VAL_2 =
	     { 1'd1,
	       processor_extMemory_request_peek__07_BITS_349__ETC___d420,
	       last_dest } ;

  // inlined wires
  assign w_put_req_0$wget =
	     MUX_w_put_req_0$wset_1__SEL_1 ?
	       MUX_w_put_req_0$wset_1__VAL_1 :
	       MUX_w_put_req_0$wset_1__VAL_1 ;
  assign w_put_req_0$whas =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd0 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ||
	     WILL_FIRE_RL_req_send_next_flit && pendingSlave$D_OUT == 2'd0 ;
  assign w_put_req_1$wget =
	     MUX_w_put_req_1$wset_1__SEL_1 ?
	       MUX_w_put_req_0$wset_1__VAL_1 :
	       MUX_w_put_req_0$wset_1__VAL_1 ;
  assign w_put_req_1$whas =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd1 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ||
	     WILL_FIRE_RL_req_send_next_flit && pendingSlave$D_OUT == 2'd1 ;
  assign w_put_req_2$wget =
	     MUX_w_put_req_2$wset_1__SEL_1 ?
	       MUX_w_put_req_0$wset_1__VAL_1 :
	       MUX_w_put_req_0$wset_1__VAL_1 ;
  assign w_put_req_2$whas =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd2 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ||
	     WILL_FIRE_RL_req_send_next_flit && pendingSlave$D_OUT == 2'd2 ;
  assign w_put_req_3$wget =
	     MUX_w_put_req_3$wset_1__SEL_1 ?
	       MUX_w_put_req_0$wset_1__VAL_1 :
	       MUX_w_put_req_0$wset_1__VAL_1 ;
  assign w_put_req_3$whas =
	     WILL_FIRE_RL_req_send_first_flit &&
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ==
	     2'd3 &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ||
	     WILL_FIRE_RL_req_send_next_flit && pendingSlave$D_OUT == 2'd3 ;
  assign w_peek_rsp_0$wget =
	     { nullPer$slave_response_peek[77:68],
	       CASE_nullPerslave_response_peek_BITS_67_TO_66_ETC__q3,
	       nullPer$slave_response_peek[64:0] } ;
  assign w_peek_rsp_1$wget =
	     { counter$slave_response_peek[77:68],
	       CASE_counterslave_response_peek_BITS_67_TO_66_ETC__q4,
	       counter$slave_response_peek[64:0] } ;
  assign w_peek_rsp_2$wget =
	     { bootMem$slave_response_peek[77:68],
	       CASE_bootMemslave_response_peek_BITS_67_TO_66_ETC__q5,
	       bootMem$slave_response_peek[64:0] } ;
  assign w_peek_rsp_3$wget =
	     { processor$pic_0_slave_response_peek[77:68],
	       CASE_processorpic_0_slave_response_peek_BITS__ETC__q6,
	       processor$pic_0_slave_response_peek[64:0] } ;
  assign w_get_rsp_0$whas =
	     WILL_FIRE_RL_rsp_receive && pendingSlave$D_OUT == 2'd0 ;
  assign w_get_rsp_1$whas =
	     WILL_FIRE_RL_rsp_receive && pendingSlave$D_OUT == 2'd1 ;
  assign w_get_rsp_2$whas =
	     WILL_FIRE_RL_rsp_receive && pendingSlave$D_OUT == 2'd2 ;
  assign w_get_rsp_3$whas =
	     WILL_FIRE_RL_rsp_receive && pendingSlave$D_OUT == 2'd3 ;
  assign w_to_arbiter_0$wget =
	     WILL_FIRE_RL_route_first_flit ?
	       MUX_w_to_arbiter_0$wset_1__VAL_1 :
	       MUX_w_to_arbiter_0$wset_1__VAL_2 ;
  assign w_to_arbiter_0$whas =
	     WILL_FIRE_RL_route_first_flit ||
	     processor$RDY_extMemory_request_peek &&
	     processor$extMemory_request_canGet &&
	     state ;
  assign w_to_arbiter_1_0$wget =
	     { 1'd1,
	       axi_translator$slave_response_peek[269:260],
	       CASE_axi_translatorslave_response_peek_BITS_2_ETC__q8,
	       axi_translator$slave_response_peek[256:0] } ;
  assign w_to_arbiter_1_0$whas =
	     axi_translator$RDY_slave_response_peek &&
	     axi_translator$slave_response_canGet &&
	     state_1 ||
	     axi_translator$RDY_slave_response_peek &&
	     axi_translator$slave_response_canGet &&
	     !state_1 ;
  assign w_to_arbiter_1_1$wget =
	     { 1'd1,
	       burster$slave_response_peek[269:260],
	       CASE_bursterslave_response_peek_BITS_259_TO_2_ETC__q9,
	       burster$slave_response_peek[256:0] } ;
  assign w_to_arbiter_1_1$whas =
	     burster$RDY_slave_response_peek &&
	     burster$slave_response_canGet &&
	     state_1 ||
	     burster$RDY_slave_response_peek &&
	     burster$slave_response_canGet &&
	     !state_1 ;
  assign debugs_0_get_d_dw$wget =
	     { 1'd1, debug_stream_sinks_0_stream_in_data } ;
  assign debugs_0_put_data_dw$wget =
	     { 1'd1, processor$debugStream_0_response_get } ;
  assign debugs_0_put_data_dw$whas =
	     processor$RDY_debugStream_0_response_get &&
	     debug_stream_sources_0_stream_out_ready ;
  assign w_get_0$whas =
	     WILL_FIRE_RL_arbiter && w_to_arbiter_0$whas &&
	     w_to_arbiter_0$wget[351] &&
	     CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7 ;
  assign w_get_1_0$whas = processor$RDY_extMemory_response_put && _dfoo6 ;
  assign w_get_1_1$whas = processor$RDY_extMemory_response_put && _dfoo5 ;

  // register is_allocated
  assign is_allocated$D_IN = 1'b0 ;
  assign is_allocated$EN = 1'b0 ;

  // register is_allocated_1
  assign is_allocated_1$D_IN = 1'b0 ;
  assign is_allocated_1$EN = 1'b0 ;

  // register last_dest
  assign last_dest$D_IN =
	     processor$extMemory_request_peek[340:333] == 8'hFF ||
	     processor$extMemory_request_peek[340:327] == 14'h2000 ;
  assign last_dest$EN = WILL_FIRE_RL_route_first_flit ;

  // register last_source_1
  assign last_source_1$D_IN =
	     IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 ;
  assign last_source_1$EN =
	     processor$RDY_extMemory_response_put && !state_1 &&
	     IF_IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_t_ETC___d454 ;

  // register qsysIrqs
  assign qsysIrqs$D_IN = irq_irqs ;
  assign qsysIrqs$EN = 1'd1 ;

  // register req_state
  assign req_state$D_IN =
	     MUX_req_state$write_1__SEL_1 ?
	       MUX_req_state$write_1__VAL_1 :
	       MUX_req_state$write_1__VAL_1 ;
  assign req_state$EN =
	     WILL_FIRE_RL_req_send_first_flit &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ||
	     WILL_FIRE_RL_req_send_next_flit ;

  // register state
  assign state$D_IN =
	     w_to_arbiter_0$whas && w_to_arbiter_0$wget[302:301] == 2'd1 &&
	     !w_to_arbiter_0$wget[300] ;
  assign state$EN =
	     WILL_FIRE_RL_arbiter && w_to_arbiter_0$whas &&
	     w_to_arbiter_0$wget[351] &&
	     CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7 ;

  // register state_1
  assign state_1$D_IN =
	     state_1 ?
	       SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d464 &&
	       !SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d470 :
	       SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d477 &&
	       !SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d478 ;
  assign state_1$EN =
	     processor$RDY_extMemory_response_put &&
	     state_1_27_AND_SEL_ARR_w_to_arbiter_1_0_whas___ETC___d456 ;

  // submodule axi_translator
  assign axi_translator$read_master_ARREADY = axm_memory_ARREADY ;
  assign axi_translator$read_master_RDATA = axm_memory_RDATA ;
  assign axi_translator$read_master_RID = axm_memory_RID ;
  assign axi_translator$read_master_RLAST = axm_memory_RLAST ;
  assign axi_translator$read_master_RRESP = axm_memory_RRESP ;
  assign axi_translator$read_master_RVALID = axm_memory_RVALID ;
  assign axi_translator$slave_request_put_val =
	     { w_to_arbiter_0$wget[350:303],
	       (w_to_arbiter_0$whas && w_to_arbiter_0$wget[302:301] == 2'd0) ?
		 { 2'd0, w_to_arbiter_0$wget[300:1] } :
		 ((w_to_arbiter_0$whas &&
		   w_to_arbiter_0$wget[302:301] == 2'd1) ?
		    { 2'd1, w_to_arbiter_0$wget[300:1] } :
		    { 2'd2,
		      292'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		      w_to_arbiter_0$wget[8:1] }) } ;
  assign axi_translator$write_master_AWREADY = axm_memory_AWREADY ;
  assign axi_translator$write_master_BID = axm_memory_BID ;
  assign axi_translator$write_master_BRESP = axm_memory_BRESP ;
  assign axi_translator$write_master_BVALID = axm_memory_BVALID ;
  assign axi_translator$write_master_WREADY = axm_memory_WREADY ;
  assign axi_translator$EN_slave_request_put =
	     WILL_FIRE_RL_arbiter && w_to_arbiter_0$wget[0] == 1'd0 &&
	     (state_73_AND_w_to_arbiter_0_whas__55_AND_w_to__ETC___d374 ||
	      NOT_state_73_96_AND_w_to_arbiter_0_whas__55_AN_ETC___d397) ;
  assign axi_translator$EN_slave_response_get =
	     axi_translator$RDY_slave_response_get && w_get_1_0$whas ;

  // submodule bootMem
  assign bootMem$slave_request_put_val =
	     { w_put_req_2$wget[133:86],
	       CASE_w_put_req_2wget_BITS_85_TO_84_0_w_put_re_ETC__q16,
	       w_put_req_2$wget[83:0] } ;
  assign bootMem$EN_slave_request_put =
	     bootMem$RDY_slave_request_put && w_put_req_2$whas &&
	     w_put_req_2$wget[134] ;
  assign bootMem$EN_slave_response_get =
	     bootMem$RDY_slave_response_get && w_get_rsp_2$whas ;

  // submodule burster
  assign burster$master_response_put_val =
	     { peripheralBridge$slave_response_get[269:260],
	       CASE_peripheralBridgeslave_response_get_BITS__ETC__q17,
	       peripheralBridge$slave_response_get[256:0] } ;
  assign burster$slave_request_put_val =
	     { w_to_arbiter_0$wget[350:303],
	       (w_to_arbiter_0$whas && w_to_arbiter_0$wget[302:301] == 2'd0) ?
		 { 2'd0, w_to_arbiter_0$wget[300:1] } :
		 ((w_to_arbiter_0$whas &&
		   w_to_arbiter_0$wget[302:301] == 2'd1) ?
		    { 2'd1, w_to_arbiter_0$wget[300:1] } :
		    { 2'd2,
		      292'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		      w_to_arbiter_0$wget[8:1] }) } ;
  assign burster$EN_slave_request_put =
	     WILL_FIRE_RL_arbiter && w_to_arbiter_0$wget[0] == 1'd1 &&
	     (state_73_AND_w_to_arbiter_0_whas__55_AND_w_to__ETC___d374 ||
	      NOT_state_73_96_AND_w_to_arbiter_0_whas__55_AN_ETC___d397) ;
  assign burster$EN_slave_response_get =
	     burster$RDY_slave_response_get && w_get_1_1$whas ;
  assign burster$EN_master_request_get =
	     peripheralBridge$RDY_slave_request_put &&
	     burster$RDY_master_request_get ;
  assign burster$EN_master_response_put =
	     peripheralBridge$RDY_slave_response_get &&
	     burster$RDY_master_response_put ;

  // submodule counter
  assign counter$slave_request_put_val =
	     { w_put_req_1$wget[133:86],
	       CASE_w_put_req_1wget_BITS_85_TO_84_0_w_put_re_ETC__q18,
	       w_put_req_1$wget[83:0] } ;
  assign counter$EN_slave_request_put =
	     counter$RDY_slave_request_put && w_put_req_1$whas &&
	     w_put_req_1$wget[134] ;
  assign counter$EN_slave_response_get =
	     counter$RDY_slave_response_get && w_get_rsp_1$whas ;

  // submodule debugs_0_get_f
  assign debugs_0_get_f$D_IN = debugs_0_get_d_dw$wget[7:0] ;
  assign debugs_0_get_f$ENQ =
	     debugs_0_get_f$FULL_N && debug_stream_sinks_0_stream_in_valid &&
	     debugs_0_get_d_dw$wget[8] ;
  assign debugs_0_get_f$DEQ =
	     processor$RDY_debugStream_0_request_put &&
	     debugs_0_get_f$EMPTY_N ;
  assign debugs_0_get_f$CLR = 1'b0 ;

  // submodule nullPer
  assign nullPer$slave_request_put_val =
	     { w_put_req_0$wget[133:86],
	       CASE_w_put_req_0wget_BITS_85_TO_84_0_w_put_re_ETC__q19,
	       w_put_req_0$wget[83:0] } ;
  assign nullPer$EN_slave_request_put =
	     nullPer$RDY_slave_request_put && w_put_req_0$whas &&
	     w_put_req_0$wget[134] ;
  assign nullPer$EN_slave_response_get =
	     nullPer$RDY_slave_response_get && w_get_rsp_0$whas ;

  // submodule pendingSlave
  assign pendingSlave$D_IN =
	     IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 ;
  assign pendingSlave$ENQ = MUX_req_state$write_1__SEL_1 ;
  assign pendingSlave$DEQ =
	     WILL_FIRE_RL_rsp_receive &&
	     (!SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165 ||
	      SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175) ;
  assign pendingSlave$CLR = 1'b0 ;

  // submodule peripheralBridge
  assign peripheralBridge$master_response_put_val =
	     { x__h20006,
	       x__h20268,
	       SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d151,
	       IF_SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rs_ETC___d190,
	       SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d200,
	       SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d210 } ;
  assign peripheralBridge$slave_request_put_val =
	     { burster$master_request_get[349:302],
	       CASE_burstermaster_request_get_BITS_301_TO_30_ETC__q20,
	       burster$master_request_get[299:0] } ;
  assign peripheralBridge$EN_slave_request_put =
	     peripheralBridge$RDY_slave_request_put &&
	     burster$RDY_master_request_get ;
  assign peripheralBridge$EN_slave_response_get =
	     peripheralBridge$RDY_slave_response_get &&
	     burster$RDY_master_response_put ;
  assign peripheralBridge$EN_master_request_get =
	     WILL_FIRE_RL_req_send_first_flit &&
	     SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 ||
	     WILL_FIRE_RL_req_send_next_flit ;
  assign peripheralBridge$EN_master_response_put = WILL_FIRE_RL_rsp_receive ;

  // submodule processor
  assign processor$debugStream_0_request_put = debugs_0_get_f$D_OUT ;
  assign processor$extMemory_response_put_val =
	     state_1 ?
	       { x__h63500,
		 x__h63515,
		 SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d523 } :
	       { x__h64182,
		 x__h64189,
		 SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d536 } ;
  assign processor$pic_0_slave_request_put_val =
	     { w_put_req_3$wget[133:86],
	       CASE_w_put_req_3wget_BITS_85_TO_84_0_w_put_re_ETC__q21,
	       w_put_req_3$wget[83:0] } ;
  assign processor$putIrqs_interruptLines = qsysIrqs ;
  assign processor$EN_extMemory_request_get =
	     processor$RDY_extMemory_request_get && w_get_0$whas ;
  assign processor$EN_extMemory_response_put =
	     processor$RDY_extMemory_response_put &&
	     state_1_27_AND_SEL_ARR_w_to_arbiter_1_0_whas___ETC___d456 ;
  assign processor$EN_debugStream_0_request_put =
	     processor$RDY_debugStream_0_request_put &&
	     debugs_0_get_f$EMPTY_N ;
  assign processor$EN_debugStream_0_response_get =
	     processor$RDY_debugStream_0_response_get &&
	     debug_stream_sources_0_stream_out_ready ;
  assign processor$EN_pic_0_slave_request_put =
	     processor$RDY_pic_0_slave_request_put && w_put_req_3$whas &&
	     w_put_req_3$wget[134] ;
  assign processor$EN_pic_0_slave_response_get =
	     processor$RDY_pic_0_slave_response_get && w_get_rsp_3$whas ;

  // remaining internal signals
  assign IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 =
	     IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_to_a_ETC___d450 -
	     _1_MINUS_last_source_1_37___d443 ;
  assign IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_to_a_ETC___d450 =
	     _1_MINUS_last_source_1_37___d443 ?
	       !w_to_arbiter_1_1$whas || !w_to_arbiter_1_1$wget[270] :
	       !w_to_arbiter_1_0$whas || !w_to_arbiter_1_0$wget[270] ;
  assign IF_1_MINUS_last_source_1_37_43_THEN_w_to_arbit_ETC___d451 =
	     _1_MINUS_last_source_1_37___d443 ?
	       w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[270] :
	       w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[270] ;
  assign IF_1_MINUS_last_source_1_37_43_THEN_w_to_arbit_ETC___d452 =
	     _1_MINUS_last_source_1_37___d443 ?
	       w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[270] :
	       w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[270] ;
  assign IF_IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_t_ETC___d454 =
	     (IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_to_a_ETC___d450 ?
		IF_1_MINUS_last_source_1_37_43_THEN_w_to_arbit_ETC___d451 :
		IF_1_MINUS_last_source_1_37_43_THEN_w_to_arbit_ETC___d452) &&
	     processor$extMemory_response_canPut ;
  assign IF_SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rs_ETC___d190 =
	     SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165 ?
	       { 2'd0,
		 SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175 } :
	       (SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d186 ?
		  { 2'd1, 1'bx /* unspecified value */  } :
		  { 2'd2,
		    SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175 }) ;
  assign IF_SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to__ETC___d509 =
	     SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d464 ?
	       { 2'd0,
		 SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d470 } :
	       (SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d506 ?
		  { 2'd1, 1'bx /* unspecified value */  } :
		  { 2'd2,
		    SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d470 }) ;
  assign IF_SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to__ETC___d532 =
	     SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d477 ?
	       { 2'd0,
		 SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d478 } :
	       (SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d529 ?
		  { 2'd1, 1'bx /* unspecified value */  } :
		  { 2'd2,
		    SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d478 }) ;
  assign IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 =
	     (peripheralBridge$master_request_peek[125:94] == 32'h7F800000) ?
	       2'd1 :
	       ((peripheralBridge$master_request_peek[124:111] == 14'h2000) ?
		  2'd2 :
		  ((peripheralBridge$master_request_peek[124:117] == 8'd255 &&
		    peripheralBridge$master_request_peek[116:108] == 9'd1) ?
		     rawRet__h7965[1:0] :
		     2'd0)) ;
  assign NOT_state_73_96_AND_w_to_arbiter_0_whas__55_AN_ETC___d397 =
	     !state && w_to_arbiter_0$whas && w_to_arbiter_0$wget[351] &&
	     CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7 ;
  assign SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d523 =
	     { CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q13,
	       IF_SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to__ETC___d509,
	       CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q14,
	       CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q15 } ;
  assign SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d536 =
	     { CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q10,
	       IF_SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to__ETC___d532,
	       CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q11,
	       CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q12 } ;
  assign _1_MINUS_last_source_1_37___d443 = 1'd1 - last_source_1 ;
  assign _dfoo5 =
	     last_source_1 == 1'd1 && state_1 &&
	     SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d438 &&
	     processor$extMemory_response_canPut ||
	     IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 ==
	     1'd1 &&
	     !state_1 &&
	     IF_IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_t_ETC___d454 ;
  assign _dfoo6 =
	     last_source_1 == 1'd0 && state_1 &&
	     SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d438 &&
	     processor$extMemory_response_canPut ||
	     IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 ==
	     1'd0 &&
	     !state_1 &&
	     IF_IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_t_ETC___d454 ;
  assign picNumber__h7819 =
	     peripheralBridge$master_request_peek[116:108] - 9'd1 ;
  assign processor_extMemory_request_peek__07_BITS_349__ETC___d420 =
	     { processor$extMemory_request_peek[349:302],
	       CASE_processorextMemory_request_peek_BITS_301_ETC__q1,
	       processor$extMemory_request_peek[299:0] } ;
  assign rawRet__h7965 = 9'd3 + picNumber__h7819 ;
  assign state_1_27_AND_SEL_ARR_w_to_arbiter_1_0_whas___ETC___d456 =
	     state_1 &&
	     SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d438 &&
	     processor$extMemory_response_canPut ||
	     !state_1 &&
	     IF_IF_1_MINUS_last_source_1_37_43_THEN_NOT_w_t_ETC___d454 ;
  assign state_73_AND_w_to_arbiter_0_whas__55_AND_w_to__ETC___d374 =
	     state && w_to_arbiter_0$whas && w_to_arbiter_0$wget[351] &&
	     CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7 ;
  always@(processor$extMemory_request_peek)
  begin
    case (processor$extMemory_request_peek[301:300])
      2'd0, 2'd1:
	  CASE_processorextMemory_request_peek_BITS_301_ETC__q1 =
	      processor$extMemory_request_peek[301:300];
      default: CASE_processorextMemory_request_peek_BITS_301_ETC__q1 = 2'd2;
    endcase
  end
  always@(IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51 or
	  nullPer$slave_request_canPut or
	  counter$slave_request_canPut or
	  bootMem$slave_request_canPut or
	  processor$pic_0_slave_request_canPut)
  begin
    case (IF_peripheralBridge_master_request_peek__6_BIT_ETC___d51)
      2'd0:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 =
	      nullPer$slave_request_canPut;
      2'd1:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 =
	      counter$slave_request_canPut;
      2'd2:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 =
	      bootMem$slave_request_canPut;
      2'd3:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d66 =
	      processor$pic_0_slave_request_canPut;
    endcase
  end
  always@(pendingSlave$D_OUT or
	  nullPer$slave_request_canPut or
	  counter$slave_request_canPut or
	  bootMem$slave_request_canPut or
	  processor$pic_0_slave_request_canPut)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d90 =
	      nullPer$slave_request_canPut;
      2'd1:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d90 =
	      counter$slave_request_canPut;
      2'd2:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d90 =
	      bootMem$slave_request_canPut;
      2'd3:
	  SEL_ARR_w_canPut_req_0_whas__3_AND_w_canPut_re_ETC___d90 =
	      processor$pic_0_slave_request_canPut;
    endcase
  end
  always@(pendingSlave$D_OUT or
	  nullPer$RDY_slave_response_peek or
	  nullPer$slave_response_canGet or
	  counter$RDY_slave_response_peek or
	  counter$slave_response_canGet or
	  bootMem$RDY_slave_response_peek or
	  bootMem$slave_response_canGet or
	  processor$RDY_pic_0_slave_response_peek or
	  processor$pic_0_slave_response_canGet)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_w_canGet_rsp_0_whas__9_AND_w_canGet_rs_ETC___d112 =
	      nullPer$RDY_slave_response_peek &&
	      nullPer$slave_response_canGet;
      2'd1:
	  SEL_ARR_w_canGet_rsp_0_whas__9_AND_w_canGet_rs_ETC___d112 =
	      counter$RDY_slave_response_peek &&
	      counter$slave_response_canGet;
      2'd2:
	  SEL_ARR_w_canGet_rsp_0_whas__9_AND_w_canGet_rs_ETC___d112 =
	      bootMem$RDY_slave_response_peek &&
	      bootMem$slave_response_canGet;
      2'd3:
	  SEL_ARR_w_canGet_rsp_0_whas__9_AND_w_canGet_rs_ETC___d112 =
	      processor$RDY_pic_0_slave_response_peek &&
	      processor$pic_0_slave_response_canGet;
    endcase
  end
  always@(peripheralBridge$master_request_peek)
  begin
    case (peripheralBridge$master_request_peek[85:84])
      2'd0, 2'd1:
	  CASE_peripheralBridgemaster_request_peek_BITS_ETC__q2 =
	      peripheralBridge$master_request_peek[85:84];
      default: CASE_peripheralBridgemaster_request_peek_BITS_ETC__q2 = 2'd2;
    endcase
  end
  always@(nullPer$slave_response_peek)
  begin
    case (nullPer$slave_response_peek[67:66])
      2'd0, 2'd1:
	  CASE_nullPerslave_response_peek_BITS_67_TO_66_ETC__q3 =
	      nullPer$slave_response_peek[67:65];
      default: CASE_nullPerslave_response_peek_BITS_67_TO_66_ETC__q3 =
		   { 2'd2, nullPer$slave_response_peek[65] };
    endcase
  end
  always@(counter$slave_response_peek)
  begin
    case (counter$slave_response_peek[67:66])
      2'd0, 2'd1:
	  CASE_counterslave_response_peek_BITS_67_TO_66_ETC__q4 =
	      counter$slave_response_peek[67:65];
      default: CASE_counterslave_response_peek_BITS_67_TO_66_ETC__q4 =
		   { 2'd2, counter$slave_response_peek[65] };
    endcase
  end
  always@(bootMem$slave_response_peek)
  begin
    case (bootMem$slave_response_peek[67:66])
      2'd0, 2'd1:
	  CASE_bootMemslave_response_peek_BITS_67_TO_66_ETC__q5 =
	      bootMem$slave_response_peek[67:65];
      default: CASE_bootMemslave_response_peek_BITS_67_TO_66_ETC__q5 =
		   { 2'd2, bootMem$slave_response_peek[65] };
    endcase
  end
  always@(processor$pic_0_slave_response_peek)
  begin
    case (processor$pic_0_slave_response_peek[67:66])
      2'd0, 2'd1:
	  CASE_processorpic_0_slave_response_peek_BITS__ETC__q6 =
	      processor$pic_0_slave_response_peek[67:65];
      default: CASE_processorpic_0_slave_response_peek_BITS__ETC__q6 =
		   { 2'd2, processor$pic_0_slave_response_peek[65] };
    endcase
  end
  always@(pendingSlave$D_OUT or
	  w_peek_rsp_0$wget or
	  w_peek_rsp_1$wget or w_peek_rsp_2$wget or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0: x__h20006 = w_peek_rsp_0$wget[77:74];
      2'd1: x__h20006 = w_peek_rsp_1$wget[77:74];
      2'd2: x__h20006 = w_peek_rsp_2$wget[77:74];
      2'd3: x__h20006 = w_peek_rsp_3$wget[77:74];
    endcase
  end
  always@(pendingSlave$D_OUT or
	  w_peek_rsp_0$wget or
	  w_peek_rsp_1$wget or w_peek_rsp_2$wget or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0: x__h20268 = w_peek_rsp_0$wget[73:70];
      2'd1: x__h20268 = w_peek_rsp_1$wget[73:70];
      2'd2: x__h20268 = w_peek_rsp_2$wget[73:70];
      2'd3: x__h20268 = w_peek_rsp_3$wget[73:70];
    endcase
  end
  always@(pendingSlave$D_OUT or
	  w_peek_rsp_0$wget or
	  w_peek_rsp_1$wget or w_peek_rsp_2$wget or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175 =
	      w_peek_rsp_0$wget[65];
      2'd1:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175 =
	      w_peek_rsp_1$wget[65];
      2'd2:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175 =
	      w_peek_rsp_2$wget[65];
      2'd3:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d175 =
	      w_peek_rsp_3$wget[65];
    endcase
  end
  always@(pendingSlave$D_OUT or
	  nullPer$RDY_slave_response_peek or
	  w_peek_rsp_0$wget or
	  counter$RDY_slave_response_peek or
	  w_peek_rsp_1$wget or
	  bootMem$RDY_slave_response_peek or
	  w_peek_rsp_2$wget or
	  processor$RDY_pic_0_slave_response_peek or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d186 =
	      nullPer$RDY_slave_response_peek &&
	      w_peek_rsp_0$wget[67:66] == 2'd1;
      2'd1:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d186 =
	      counter$RDY_slave_response_peek &&
	      w_peek_rsp_1$wget[67:66] == 2'd1;
      2'd2:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d186 =
	      bootMem$RDY_slave_response_peek &&
	      w_peek_rsp_2$wget[67:66] == 2'd1;
      2'd3:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d186 =
	      processor$RDY_pic_0_slave_response_peek &&
	      w_peek_rsp_3$wget[67:66] == 2'd1;
    endcase
  end
  always@(pendingSlave$D_OUT or
	  nullPer$RDY_slave_response_peek or
	  w_peek_rsp_0$wget or
	  counter$RDY_slave_response_peek or
	  w_peek_rsp_1$wget or
	  bootMem$RDY_slave_response_peek or
	  w_peek_rsp_2$wget or
	  processor$RDY_pic_0_slave_response_peek or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165 =
	      nullPer$RDY_slave_response_peek &&
	      w_peek_rsp_0$wget[67:66] == 2'd0;
      2'd1:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165 =
	      counter$RDY_slave_response_peek &&
	      w_peek_rsp_1$wget[67:66] == 2'd0;
      2'd2:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165 =
	      bootMem$RDY_slave_response_peek &&
	      w_peek_rsp_2$wget[67:66] == 2'd0;
      2'd3:
	  SEL_ARR_w_peek_rsp_0_whas__14_AND_w_peek_rsp_0_ETC___d165 =
	      processor$RDY_pic_0_slave_response_peek &&
	      w_peek_rsp_3$wget[67:66] == 2'd0;
    endcase
  end
  always@(pendingSlave$D_OUT or
	  w_peek_rsp_0$wget or
	  w_peek_rsp_1$wget or w_peek_rsp_2$wget or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d200 =
	      w_peek_rsp_0$wget[64];
      2'd1:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d200 =
	      w_peek_rsp_1$wget[64];
      2'd2:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d200 =
	      w_peek_rsp_2$wget[64];
      2'd3:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d200 =
	      w_peek_rsp_3$wget[64];
    endcase
  end
  always@(pendingSlave$D_OUT or
	  w_peek_rsp_0$wget or
	  w_peek_rsp_1$wget or w_peek_rsp_2$wget or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d210 =
	      w_peek_rsp_0$wget[63:0];
      2'd1:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d210 =
	      w_peek_rsp_1$wget[63:0];
      2'd2:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d210 =
	      w_peek_rsp_2$wget[63:0];
      2'd3:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d210 =
	      w_peek_rsp_3$wget[63:0];
    endcase
  end
  always@(pendingSlave$D_OUT or
	  w_peek_rsp_0$wget or
	  w_peek_rsp_1$wget or w_peek_rsp_2$wget or w_peek_rsp_3$wget)
  begin
    case (pendingSlave$D_OUT)
      2'd0:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d151 =
	      w_peek_rsp_0$wget[69:68];
      2'd1:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d151 =
	      w_peek_rsp_1$wget[69:68];
      2'd2:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d151 =
	      w_peek_rsp_2$wget[69:68];
      2'd3:
	  SEL_ARR_IF_w_peek_rsp_0_whas__14_THEN_w_peek_r_ETC___d151 =
	      w_peek_rsp_3$wget[69:68];
    endcase
  end
  always@(w_to_arbiter_0$wget or
	  axi_translator$slave_request_canPut or burster$slave_request_canPut)
  begin
    case (w_to_arbiter_0$wget[0])
      1'd0:
	  CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7 =
	      axi_translator$slave_request_canPut;
      1'd1:
	  CASE_w_to_arbiter_0wget_BIT_0_0_axi_translato_ETC__q7 =
	      burster$slave_request_canPut;
    endcase
  end
  always@(axi_translator$slave_response_peek)
  begin
    case (axi_translator$slave_response_peek[259:258])
      2'd0, 2'd1:
	  CASE_axi_translatorslave_response_peek_BITS_2_ETC__q8 =
	      axi_translator$slave_response_peek[259:257];
      default: CASE_axi_translatorslave_response_peek_BITS_2_ETC__q8 =
		   { 2'd2, axi_translator$slave_response_peek[257] };
    endcase
  end
  always@(burster$slave_response_peek)
  begin
    case (burster$slave_response_peek[259:258])
      2'd0, 2'd1:
	  CASE_bursterslave_response_peek_BITS_259_TO_2_ETC__q9 =
	      burster$slave_response_peek[259:257];
      default: CASE_bursterslave_response_peek_BITS_259_TO_2_ETC__q9 =
		   { 2'd2, burster$slave_response_peek[257] };
    endcase
  end
  always@(last_source_1 or w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0: x__h63500 = w_to_arbiter_1_0$wget[269:266];
      1'd1: x__h63500 = w_to_arbiter_1_1$wget[269:266];
    endcase
  end
  always@(last_source_1 or w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0: x__h63515 = w_to_arbiter_1_0$wget[265:262];
      1'd1: x__h63515 = w_to_arbiter_1_1$wget[265:262];
    endcase
  end
  always@(last_source_1 or
	  w_to_arbiter_1_0$whas or
	  w_to_arbiter_1_0$wget or
	  w_to_arbiter_1_1$whas or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d438 =
	      w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[270];
      1'd1:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d438 =
	      w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[270];
    endcase
  end
  always@(last_source_1 or w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d470 =
	      w_to_arbiter_1_0$wget[257];
      1'd1:
	  SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d470 =
	      w_to_arbiter_1_1$wget[257];
    endcase
  end
  always@(last_source_1 or
	  w_to_arbiter_1_0$whas or
	  w_to_arbiter_1_0$wget or
	  w_to_arbiter_1_1$whas or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d464 =
	      w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[259:258] == 2'd0;
      1'd1:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d464 =
	      w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[259:258] == 2'd0;
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0: x__h64182 = w_to_arbiter_1_0$wget[269:266];
      1'd1: x__h64182 = w_to_arbiter_1_1$wget[269:266];
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0: x__h64189 = w_to_arbiter_1_0$wget[265:262];
      1'd1: x__h64189 = w_to_arbiter_1_1$wget[265:262];
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0:
	  SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d478 =
	      w_to_arbiter_1_0$wget[257];
      1'd1:
	  SEL_ARR_IF_w_to_arbiter_1_0_whas__28_THEN_w_to_ETC___d478 =
	      w_to_arbiter_1_1$wget[257];
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$whas or
	  w_to_arbiter_1_0$wget or
	  w_to_arbiter_1_1$whas or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d477 =
	      w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[259:258] == 2'd0;
      1'd1:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d477 =
	      w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[259:258] == 2'd0;
    endcase
  end
  always@(last_source_1 or
	  w_to_arbiter_1_0$whas or
	  w_to_arbiter_1_0$wget or
	  w_to_arbiter_1_1$whas or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d506 =
	      w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[259:258] == 2'd1;
      1'd1:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d506 =
	      w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[259:258] == 2'd1;
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$whas or
	  w_to_arbiter_1_0$wget or
	  w_to_arbiter_1_1$whas or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d529 =
	      w_to_arbiter_1_0$whas && w_to_arbiter_1_0$wget[259:258] == 2'd1;
      1'd1:
	  SEL_ARR_w_to_arbiter_1_0_whas__28_AND_w_to_arb_ETC___d529 =
	      w_to_arbiter_1_1$whas && w_to_arbiter_1_1$wget[259:258] == 2'd1;
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0:
	  CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q10 =
	      w_to_arbiter_1_0$wget[261:260];
      1'd1:
	  CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q10 =
	      w_to_arbiter_1_1$wget[261:260];
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0:
	  CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q11 =
	      w_to_arbiter_1_0$wget[256];
      1'd1:
	  CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q11 =
	      w_to_arbiter_1_1$wget[256];
    endcase
  end
  always@(IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476 or
	  w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (IF_0_CONCAT_1_MINUS_last_source_1_37_43_73_ULT_ETC___d476)
      1'd0:
	  CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q12 =
	      w_to_arbiter_1_0$wget[255:0];
      1'd1:
	  CASE_IF_0_CONCAT_1_MINUS_last_source_1_37_43_7_ETC__q12 =
	      w_to_arbiter_1_1$wget[255:0];
    endcase
  end
  always@(last_source_1 or w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q13 =
	      w_to_arbiter_1_0$wget[261:260];
      1'd1:
	  CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q13 =
	      w_to_arbiter_1_1$wget[261:260];
    endcase
  end
  always@(last_source_1 or w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q14 =
	      w_to_arbiter_1_0$wget[256];
      1'd1:
	  CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q14 =
	      w_to_arbiter_1_1$wget[256];
    endcase
  end
  always@(last_source_1 or w_to_arbiter_1_0$wget or w_to_arbiter_1_1$wget)
  begin
    case (last_source_1)
      1'd0:
	  CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q15 =
	      w_to_arbiter_1_0$wget[255:0];
      1'd1:
	  CASE_last_source_1_0_w_to_arbiter_1_0wget_BIT_ETC__q15 =
	      w_to_arbiter_1_1$wget[255:0];
    endcase
  end
  always@(w_put_req_2$wget)
  begin
    case (w_put_req_2$wget[85:84])
      2'd0, 2'd1:
	  CASE_w_put_req_2wget_BITS_85_TO_84_0_w_put_re_ETC__q16 =
	      w_put_req_2$wget[85:84];
      default: CASE_w_put_req_2wget_BITS_85_TO_84_0_w_put_re_ETC__q16 = 2'd2;
    endcase
  end
  always@(peripheralBridge$slave_response_get)
  begin
    case (peripheralBridge$slave_response_get[259:258])
      2'd0, 2'd1:
	  CASE_peripheralBridgeslave_response_get_BITS__ETC__q17 =
	      peripheralBridge$slave_response_get[259:257];
      default: CASE_peripheralBridgeslave_response_get_BITS__ETC__q17 =
		   { 2'd2, peripheralBridge$slave_response_get[257] };
    endcase
  end
  always@(w_put_req_1$wget)
  begin
    case (w_put_req_1$wget[85:84])
      2'd0, 2'd1:
	  CASE_w_put_req_1wget_BITS_85_TO_84_0_w_put_re_ETC__q18 =
	      w_put_req_1$wget[85:84];
      default: CASE_w_put_req_1wget_BITS_85_TO_84_0_w_put_re_ETC__q18 = 2'd2;
    endcase
  end
  always@(w_put_req_0$wget)
  begin
    case (w_put_req_0$wget[85:84])
      2'd0, 2'd1:
	  CASE_w_put_req_0wget_BITS_85_TO_84_0_w_put_re_ETC__q19 =
	      w_put_req_0$wget[85:84];
      default: CASE_w_put_req_0wget_BITS_85_TO_84_0_w_put_re_ETC__q19 = 2'd2;
    endcase
  end
  always@(burster$master_request_get)
  begin
    case (burster$master_request_get[301:300])
      2'd0, 2'd1:
	  CASE_burstermaster_request_get_BITS_301_TO_30_ETC__q20 =
	      burster$master_request_get[301:300];
      default: CASE_burstermaster_request_get_BITS_301_TO_30_ETC__q20 = 2'd2;
    endcase
  end
  always@(w_put_req_3$wget)
  begin
    case (w_put_req_3$wget[85:84])
      2'd0, 2'd1:
	  CASE_w_put_req_3wget_BITS_85_TO_84_0_w_put_re_ETC__q21 =
	      w_put_req_3$wget[85:84];
      default: CASE_w_put_req_3wget_BITS_85_TO_84_0_w_put_re_ETC__q21 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge csi_clockreset_clk)
  begin
    if (csi_clockreset_reset_n == `BSV_RESET_VALUE)
      begin
        is_allocated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	is_allocated_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	last_dest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	last_source_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	qsysIrqs <= `BSV_ASSIGNMENT_DELAY 32'd0;
	req_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (is_allocated$EN)
	  is_allocated <= `BSV_ASSIGNMENT_DELAY is_allocated$D_IN;
	if (is_allocated_1$EN)
	  is_allocated_1 <= `BSV_ASSIGNMENT_DELAY is_allocated_1$D_IN;
	if (last_dest$EN) last_dest <= `BSV_ASSIGNMENT_DELAY last_dest$D_IN;
	if (last_source_1$EN)
	  last_source_1 <= `BSV_ASSIGNMENT_DELAY last_source_1$D_IN;
	if (qsysIrqs$EN) qsysIrqs <= `BSV_ASSIGNMENT_DELAY qsysIrqs$D_IN;
	if (req_state$EN) req_state <= `BSV_ASSIGNMENT_DELAY req_state$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (state_1$EN) state_1 <= `BSV_ASSIGNMENT_DELAY state_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    is_allocated = 1'h0;
    is_allocated_1 = 1'h0;
    last_dest = 1'h0;
    last_source_1 = 1'h0;
    qsysIrqs = 32'hAAAAAAAA;
    req_state = 1'h0;
    state = 1'h0;
    state_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTopAxi

