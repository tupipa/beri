//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
//
// On Sun Mar 22 00:27:18 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_stream_request_put         O     1 reg
// stream_response_get            O     8 reg
// RDY_stream_response_get        O     1 reg
// messages_request_get           O   272
// RDY_messages_request_get       O     1
// RDY_messages_response_put      O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// stream_request_put             I     8 reg
// messages_response_put          I   272
// EN_stream_request_put          I     1
// EN_messages_response_put       I     1
// EN_stream_response_get         I     1
// EN_messages_request_get        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDebugConvert(CLK,
		      RST_N,

		      stream_request_put,
		      EN_stream_request_put,
		      RDY_stream_request_put,

		      EN_stream_response_get,
		      stream_response_get,
		      RDY_stream_response_get,

		      EN_messages_request_get,
		      messages_request_get,
		      RDY_messages_request_get,

		      messages_response_put,
		      EN_messages_response_put,
		      RDY_messages_response_put);
  input  CLK;
  input  RST_N;

  // action method stream_request_put
  input  [7 : 0] stream_request_put;
  input  EN_stream_request_put;
  output RDY_stream_request_put;

  // actionvalue method stream_response_get
  input  EN_stream_response_get;
  output [7 : 0] stream_response_get;
  output RDY_stream_response_get;

  // actionvalue method messages_request_get
  input  EN_messages_request_get;
  output [271 : 0] messages_request_get;
  output RDY_messages_request_get;

  // action method messages_response_put
  input  [271 : 0] messages_response_put;
  input  EN_messages_response_put;
  output RDY_messages_response_put;

  // signals for module outputs
  wire [271 : 0] messages_request_get;
  wire [7 : 0] stream_response_get;
  wire RDY_messages_request_get,
       RDY_messages_response_put,
       RDY_stream_request_put,
       RDY_stream_response_get;

  // register command
  reg [271 : 0] command;
  wire [271 : 0] command$D_IN;
  wire command$EN;

  // register commandCount
  reg [7 : 0] commandCount;
  wire [7 : 0] commandCount$D_IN;
  wire commandCount$EN;

  // register commandState
  reg [1 : 0] commandState;
  wire [1 : 0] commandState$D_IN;
  wire commandState$EN;

  // register responseCount
  reg [7 : 0] responseCount;
  wire [7 : 0] responseCount$D_IN;
  wire responseCount$EN;

  // register responseState
  reg [1 : 0] responseState;
  reg [1 : 0] responseState$D_IN;
  wire responseState$EN;

  // ports of submodule inChar
  wire [7 : 0] inChar$D_IN, inChar$D_OUT;
  wire inChar$CLR, inChar$DEQ, inChar$EMPTY_N, inChar$ENQ, inChar$FULL_N;

  // ports of submodule outChar
  reg [7 : 0] outChar$D_IN;
  wire [7 : 0] outChar$D_OUT;
  wire outChar$CLR, outChar$DEQ, outChar$EMPTY_N, outChar$ENQ, outChar$FULL_N;

  // ports of submodule responses
  wire [271 : 0] responses$D_IN, responses$D_OUT;
  wire responses$CLR,
       responses$DEQ,
       responses$EMPTY_N,
       responses$ENQ,
       responses$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_deliverResponse, WILL_FIRE_RL_getCommand;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_commandState$write_1__VAL_1;
  wire MUX_commandState$write_1__SEL_1;

  // remaining internal signals
  reg [263 : 0] CASE_commandState_0_0b0_CONCAT_DONTCARE_1_IF_N_ETC__q2;
  reg [7 : 0] CASE_command_BITS_271_TO_264_0_command_BITS_27_ETC__q1,
	      CASE_messages_response_put_BITS_271_TO_264_0_m_ETC__q3,
	      x__h6313,
	      x__h6737;
  wire [255 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d319;
  wire [239 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d312;
  wire [223 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d305;
  wire [207 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d298;
  wire [191 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d291;
  wire [175 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d284;
  wire [159 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d277;
  wire [143 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d270;
  wire [127 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d263;
  wire [111 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d256;
  wire [95 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d249;
  wire [79 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d242;
  wire [63 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d235;
  wire [47 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d228;
  wire [31 : 0] IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d221;
  wire [7 : 0] IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d161,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d162,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d163,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d164,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d165,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d166,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d167,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d168,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d169,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d170,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d171,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d172,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d173,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d174,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d175,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d176,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d177,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d178,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d179,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d180,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d181,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d182,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d183,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d184,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d185,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d186,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d187,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d188,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d189,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d190,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d191,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d192,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d193,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d194,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d195,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d196,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d197,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d198,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d199,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d200,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d201,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d202,
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d203;
  wire commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d16,
       responseState_28_EQ_1_30_AND_responses_first___ETC___d472,
       responseState_28_EQ_1_30_OR_responseState_28_E_ETC___d464;

  // action method stream_request_put
  assign RDY_stream_request_put = inChar$FULL_N ;

  // actionvalue method stream_response_get
  assign stream_response_get = outChar$D_OUT ;
  assign RDY_stream_response_get = outChar$EMPTY_N ;

  // actionvalue method messages_request_get
  assign messages_request_get =
	     { CASE_command_BITS_271_TO_264_0_command_BITS_27_ETC__q1,
	       command[263:0] } ;
  assign RDY_messages_request_get = commandState == 2'd3 ;

  // action method messages_response_put
  assign RDY_messages_response_put = responses$FULL_N ;

  // submodule inChar
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd1024),
	      .p3cntr_width(32'd10),
	      .guarded(32'd1)) inChar(.RST(RST_N),
				      .CLK(CLK),
				      .D_IN(inChar$D_IN),
				      .ENQ(inChar$ENQ),
				      .DEQ(inChar$DEQ),
				      .CLR(inChar$CLR),
				      .D_OUT(inChar$D_OUT),
				      .FULL_N(inChar$FULL_N),
				      .EMPTY_N(inChar$EMPTY_N));

  // submodule outChar
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd1024),
	      .p3cntr_width(32'd10),
	      .guarded(32'd1)) outChar(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(outChar$D_IN),
				       .ENQ(outChar$ENQ),
				       .DEQ(outChar$DEQ),
				       .CLR(outChar$CLR),
				       .D_OUT(outChar$D_OUT),
				       .FULL_N(outChar$FULL_N),
				       .EMPTY_N(outChar$EMPTY_N));

  // submodule responses
  FIFO1 #(.width(32'd272), .guarded(32'd1)) responses(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(responses$D_IN),
						      .ENQ(responses$ENQ),
						      .DEQ(responses$DEQ),
						      .CLR(responses$CLR),
						      .D_OUT(responses$D_OUT),
						      .FULL_N(responses$FULL_N),
						      .EMPTY_N(responses$EMPTY_N));

  // rule RL_getCommand
  assign WILL_FIRE_RL_getCommand = inChar$EMPTY_N && commandState != 2'd3 ;

  // rule RL_deliverResponse
  assign WILL_FIRE_RL_deliverResponse = responses$EMPTY_N && outChar$FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_commandState$write_1__SEL_1 =
	     WILL_FIRE_RL_getCommand &&
	     (commandState == 2'd0 ||
	      commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d16) ;
  always@(commandState or inChar$D_OUT)
  begin
    case (commandState)
      2'd0: MUX_commandState$write_1__VAL_1 = 2'd1;
      2'd1:
	  MUX_commandState$write_1__VAL_1 =
	      (inChar$D_OUT != 8'd0 && inChar$D_OUT <= 8'd32) ? 2'd2 : 2'd3;
      default: MUX_commandState$write_1__VAL_1 = 2'd3;
    endcase
  end

  // register command
  assign command$D_IN =
	     { IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d203,
	       CASE_commandState_0_0b0_CONCAT_DONTCARE_1_IF_N_ETC__q2 } ;
  assign command$EN = WILL_FIRE_RL_getCommand ;

  // register commandCount
  assign commandCount$D_IN =
	     (commandState == 2'd1) ? 8'd0 : commandCount + 8'd1 ;
  assign commandCount$EN =
	     WILL_FIRE_RL_getCommand &&
	     (commandState == 2'd1 && inChar$D_OUT != 8'd0 &&
	      inChar$D_OUT <= 8'd32 ||
	      commandState == 2'd2) ;

  // register commandState
  assign commandState$D_IN =
	     MUX_commandState$write_1__SEL_1 ?
	       MUX_commandState$write_1__VAL_1 :
	       2'd0 ;
  assign commandState$EN =
	     WILL_FIRE_RL_getCommand &&
	     (commandState == 2'd0 ||
	      commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d16) ||
	     EN_messages_request_get ;

  // register responseCount
  assign responseCount$D_IN =
	     (responseState == 2'd1) ? 8'd0 : responseCount + 8'd1 ;
  assign responseCount$EN =
	     WILL_FIRE_RL_deliverResponse &&
	     (responseState == 2'd1 && responses$D_OUT[263:256] != 8'd0 ||
	      responseState == 2'd2) ;

  // register responseState
  always@(responseState or responses$D_OUT)
  begin
    case (responseState)
      2'd0: responseState$D_IN = 2'd1;
      2'd1:
	  responseState$D_IN =
	      (responses$D_OUT[263:256] == 8'd0) ? 2'd0 : 2'd2;
      default: responseState$D_IN = 2'd0;
    endcase
  end
  assign responseState$EN =
	     WILL_FIRE_RL_deliverResponse &&
	     (responseState == 2'd0 ||
	      responseState_28_EQ_1_30_OR_responseState_28_E_ETC___d464) ;

  // submodule inChar
  assign inChar$D_IN = stream_request_put ;
  assign inChar$ENQ = EN_stream_request_put ;
  assign inChar$DEQ = WILL_FIRE_RL_getCommand ;
  assign inChar$CLR = 1'b0 ;

  // submodule outChar
  always@(responseState or x__h6737 or x__h6313 or responses$D_OUT)
  begin
    case (responseState)
      2'd0: outChar$D_IN = x__h6313;
      2'd1: outChar$D_IN = responses$D_OUT[263:256];
      default: outChar$D_IN = x__h6737;
    endcase
  end
  assign outChar$ENQ =
	     WILL_FIRE_RL_deliverResponse &&
	     (responseState == 2'd0 || responseState == 2'd1 ||
	      responseState == 2'd2) ;
  assign outChar$DEQ = EN_stream_response_get ;
  assign outChar$CLR = 1'b0 ;

  // submodule responses
  assign responses$D_IN =
	     { CASE_messages_response_put_BITS_271_TO_264_0_m_ETC__q3,
	       messages_response_put[263:0] } ;
  assign responses$ENQ = EN_messages_response_put ;
  assign responses$DEQ =
	     WILL_FIRE_RL_deliverResponse && responseState != 2'd0 &&
	     responseState_28_EQ_1_30_AND_responses_first___ETC___d472 ;
  assign responses$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d161 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd255 :
		command[271:264] == 8'd255) ?
	       8'd255 :
	       8'd32 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d162 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd211 :
		command[271:264] == 8'd211) ?
	       8'd211 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d161 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d163 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd245 :
		command[271:264] == 8'd245) ?
	       8'd245 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d162 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d164 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd227 :
		command[271:264] == 8'd227) ?
	       8'd227 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d163 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d165 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd244 :
		command[271:264] == 8'd244) ?
	       8'd244 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d164 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d166 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd243 :
		command[271:264] == 8'd243) ?
	       8'd243 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d165 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d167 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd210 :
		command[271:264] == 8'd210) ?
	       8'd210 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d166 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d168 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd242 :
		command[271:264] == 8'd242) ?
	       8'd242 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d167 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d169 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd240 :
		command[271:264] == 8'd240) ?
	       8'd240 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d168 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d170 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd228 :
		command[271:264] == 8'd228) ?
	       8'd228 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d169 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d171 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd197 :
		command[271:264] == 8'd197) ?
	       8'd197 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d170 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d172 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd229 :
		command[271:264] == 8'd229) ?
	       8'd229 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d171 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d173 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd205 :
		command[271:264] == 8'd205) ?
	       8'd205 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d172 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d174 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd195 :
		command[271:264] == 8'd195) ?
	       8'd195 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d173 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d175 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd194 :
		command[271:264] == 8'd194) ?
	       8'd194 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d174 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d176 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd179 :
		command[271:264] == 8'd179) ?
	       8'd179 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d175 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d177 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd178 :
		command[271:264] == 8'd178) ?
	       8'd178 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d176 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d178 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd177 :
		command[271:264] == 8'd177) ?
	       8'd177 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d177 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d179 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd176 :
		command[271:264] == 8'd176) ?
	       8'd176 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d178 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d180 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd226 :
		command[271:264] == 8'd226) ?
	       8'd226 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d179 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d181 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd225 :
		command[271:264] == 8'd225) ?
	       8'd225 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d180 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d182 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd233 :
		command[271:264] == 8'd233) ?
	       8'd233 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d181 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d183 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd83 :
		command[271:264] == 8'd83) ?
	       8'd83 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d182 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d184 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd116 :
		command[271:264] == 8'd116) ?
	       8'd116 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d183 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d185 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd117 :
		command[271:264] == 8'd117) ?
	       8'd117 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d184 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d186 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd99 :
		command[271:264] == 8'd99) ?
	       8'd99 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d185 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d187 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd115 :
		command[271:264] == 8'd115) ?
	       8'd115 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d186 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d188 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd82 :
		command[271:264] == 8'd82) ?
	       8'd82 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d187 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d189 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd114 :
		command[271:264] == 8'd114) ?
	       8'd114 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d188 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d190 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd112 :
		command[271:264] == 8'd112) ?
	       8'd112 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d189 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d191 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd100 :
		command[271:264] == 8'd100) ?
	       8'd100 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d190 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d192 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd101 :
		command[271:264] == 8'd101) ?
	       8'd101 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d191 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d193 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd77 :
		command[271:264] == 8'd77) ?
	       8'd77 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d192 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d194 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd67 :
		command[271:264] == 8'd67) ?
	       8'd67 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d193 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d195 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd66 :
		command[271:264] == 8'd66) ?
	       8'd66 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d194 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d196 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd51 :
		command[271:264] == 8'd51) ?
	       8'd51 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d195 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d197 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd50 :
		command[271:264] == 8'd50) ?
	       8'd50 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d196 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d198 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd49 :
		command[271:264] == 8'd49) ?
	       8'd49 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d197 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d199 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd48 :
		command[271:264] == 8'd48) ?
	       8'd48 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d198 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d200 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd98 :
		command[271:264] == 8'd98) ?
	       8'd98 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d199 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d201 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd97 :
		command[271:264] == 8'd97) ?
	       8'd97 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d200 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d202 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd105 :
		command[271:264] == 8'd105) ?
	       8'd105 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d201 ;
  assign IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d203 =
	     ((commandState == 2'd0) ?
		inChar$D_OUT == 8'd0 :
		command[271:264] == 8'd0) ?
	       8'd0 :
	       IF_IF_commandState_EQ_0_THEN_inChar_first__8_E_ETC___d202 ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d221 =
	     { (commandCount == 8'd31) ? inChar$D_OUT : command[255:248],
	       (commandCount == 8'd30) ? inChar$D_OUT : command[247:240],
	       (commandCount == 8'd29) ? inChar$D_OUT : command[239:232],
	       (commandCount == 8'd28) ? inChar$D_OUT : command[231:224] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d228 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d221,
	       (commandCount == 8'd27) ? inChar$D_OUT : command[223:216],
	       (commandCount == 8'd26) ? inChar$D_OUT : command[215:208] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d235 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d228,
	       (commandCount == 8'd25) ? inChar$D_OUT : command[207:200],
	       (commandCount == 8'd24) ? inChar$D_OUT : command[199:192] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d242 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d235,
	       (commandCount == 8'd23) ? inChar$D_OUT : command[191:184],
	       (commandCount == 8'd22) ? inChar$D_OUT : command[183:176] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d249 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d242,
	       (commandCount == 8'd21) ? inChar$D_OUT : command[175:168],
	       (commandCount == 8'd20) ? inChar$D_OUT : command[167:160] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d256 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d249,
	       (commandCount == 8'd19) ? inChar$D_OUT : command[159:152],
	       (commandCount == 8'd18) ? inChar$D_OUT : command[151:144] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d263 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d256,
	       (commandCount == 8'd17) ? inChar$D_OUT : command[143:136],
	       (commandCount == 8'd16) ? inChar$D_OUT : command[135:128] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d270 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d263,
	       (commandCount == 8'd15) ? inChar$D_OUT : command[127:120],
	       (commandCount == 8'd14) ? inChar$D_OUT : command[119:112] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d277 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d270,
	       (commandCount == 8'd13) ? inChar$D_OUT : command[111:104],
	       (commandCount == 8'd12) ? inChar$D_OUT : command[103:96] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d284 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d277,
	       (commandCount == 8'd11) ? inChar$D_OUT : command[95:88],
	       (commandCount == 8'd10) ? inChar$D_OUT : command[87:80] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d291 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d284,
	       (commandCount == 8'd9) ? inChar$D_OUT : command[79:72],
	       (commandCount == 8'd8) ? inChar$D_OUT : command[71:64] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d298 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d291,
	       (commandCount == 8'd7) ? inChar$D_OUT : command[63:56],
	       (commandCount == 8'd6) ? inChar$D_OUT : command[55:48] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d305 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d298,
	       (commandCount == 8'd5) ? inChar$D_OUT : command[47:40],
	       (commandCount == 8'd4) ? inChar$D_OUT : command[39:32] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d312 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d305,
	       (commandCount == 8'd3) ? inChar$D_OUT : command[31:24],
	       (commandCount == 8'd2) ? inChar$D_OUT : command[23:16] } ;
  assign IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d319 =
	     { IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d312,
	       (commandCount == 8'd1) ? inChar$D_OUT : command[15:8],
	       (commandCount == 8'd0) ? inChar$D_OUT : command[7:0] } ;
  assign commandState_EQ_1_OR_commandState_EQ_2_AND_NOT_ETC___d16 =
	     commandState == 2'd1 ||
	     commandState == 2'd2 && commandCount >= command[263:256] - 8'd1 ;
  assign responseState_28_EQ_1_30_AND_responses_first___ETC___d472 =
	     responseState == 2'd1 && responses$D_OUT[263:256] == 8'd0 ||
	     responseState == 2'd2 &&
	     responseCount >= responses$D_OUT[263:256] - 8'd1 ;
  assign responseState_28_EQ_1_30_OR_responseState_28_E_ETC___d464 =
	     responseState == 2'd1 ||
	     responseState == 2'd2 &&
	     responseCount >= responses$D_OUT[263:256] - 8'd1 ;
  always@(command)
  begin
    case (command[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd66,
      8'd67,
      8'd77,
      8'd82,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd194,
      8'd195,
      8'd197,
      8'd205,
      8'd210,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  CASE_command_BITS_271_TO_264_0_command_BITS_27_ETC__q1 =
	      command[271:264];
      default: CASE_command_BITS_271_TO_264_0_command_BITS_27_ETC__q1 = 8'd32;
    endcase
  end
  always@(responseCount or responses$D_OUT)
  begin
    case (responseCount)
      8'd0: x__h6737 = responses$D_OUT[7:0];
      8'd1: x__h6737 = responses$D_OUT[15:8];
      8'd2: x__h6737 = responses$D_OUT[23:16];
      8'd3: x__h6737 = responses$D_OUT[31:24];
      8'd4: x__h6737 = responses$D_OUT[39:32];
      8'd5: x__h6737 = responses$D_OUT[47:40];
      8'd6: x__h6737 = responses$D_OUT[55:48];
      8'd7: x__h6737 = responses$D_OUT[63:56];
      8'd8: x__h6737 = responses$D_OUT[71:64];
      8'd9: x__h6737 = responses$D_OUT[79:72];
      8'd10: x__h6737 = responses$D_OUT[87:80];
      8'd11: x__h6737 = responses$D_OUT[95:88];
      8'd12: x__h6737 = responses$D_OUT[103:96];
      8'd13: x__h6737 = responses$D_OUT[111:104];
      8'd14: x__h6737 = responses$D_OUT[119:112];
      8'd15: x__h6737 = responses$D_OUT[127:120];
      8'd16: x__h6737 = responses$D_OUT[135:128];
      8'd17: x__h6737 = responses$D_OUT[143:136];
      8'd18: x__h6737 = responses$D_OUT[151:144];
      8'd19: x__h6737 = responses$D_OUT[159:152];
      8'd20: x__h6737 = responses$D_OUT[167:160];
      8'd21: x__h6737 = responses$D_OUT[175:168];
      8'd22: x__h6737 = responses$D_OUT[183:176];
      8'd23: x__h6737 = responses$D_OUT[191:184];
      8'd24: x__h6737 = responses$D_OUT[199:192];
      8'd25: x__h6737 = responses$D_OUT[207:200];
      8'd26: x__h6737 = responses$D_OUT[215:208];
      8'd27: x__h6737 = responses$D_OUT[223:216];
      8'd28: x__h6737 = responses$D_OUT[231:224];
      8'd29: x__h6737 = responses$D_OUT[239:232];
      8'd30: x__h6737 = responses$D_OUT[247:240];
      8'd31: x__h6737 = responses$D_OUT[255:248];
      default: x__h6737 = 8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(responses$D_OUT)
  begin
    case (responses$D_OUT[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd66,
      8'd67,
      8'd77,
      8'd82,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd194,
      8'd195,
      8'd197,
      8'd205,
      8'd210,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  x__h6313 = responses$D_OUT[271:264];
      default: x__h6313 = 8'd32;
    endcase
  end
  always@(commandState or
	  command or
	  IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d319 or
	  inChar$D_OUT)
  begin
    case (commandState)
      2'd0:
	  CASE_commandState_0_0b0_CONCAT_DONTCARE_1_IF_N_ETC__q2 =
	      { 8'b0,
		256'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      2'd1:
	  CASE_commandState_0_0b0_CONCAT_DONTCARE_1_IF_N_ETC__q2 =
	      { (inChar$D_OUT != 8'd0 && inChar$D_OUT <= 8'd32) ?
		  inChar$D_OUT :
		  8'd0,
		command[255:0] };
      default: CASE_commandState_0_0b0_CONCAT_DONTCARE_1_IF_N_ETC__q2 =
		   { command[263:256],
		     (commandState == 2'd2) ?
		       IF_commandCount_EQ_31_08_THEN_inChar_first__8__ETC___d319 :
		       command[255:0] };
    endcase
  end
  always@(messages_response_put)
  begin
    case (messages_response_put[271:264])
      8'd0,
      8'd48,
      8'd49,
      8'd50,
      8'd51,
      8'd66,
      8'd67,
      8'd77,
      8'd82,
      8'd83,
      8'd97,
      8'd98,
      8'd99,
      8'd100,
      8'd101,
      8'd105,
      8'd112,
      8'd114,
      8'd115,
      8'd116,
      8'd117,
      8'd176,
      8'd177,
      8'd178,
      8'd179,
      8'd194,
      8'd195,
      8'd197,
      8'd205,
      8'd210,
      8'd211,
      8'd225,
      8'd226,
      8'd227,
      8'd228,
      8'd229,
      8'd233,
      8'd240,
      8'd242,
      8'd243,
      8'd244,
      8'd245,
      8'd255:
	  CASE_messages_response_put_BITS_271_TO_264_0_m_ETC__q3 =
	      messages_response_put[271:264];
      default: CASE_messages_response_put_BITS_271_TO_264_0_m_ETC__q3 = 8'd32;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        commandCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	commandState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	responseCount <= `BSV_ASSIGNMENT_DELAY 8'd0;
	responseState <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (commandCount$EN)
	  commandCount <= `BSV_ASSIGNMENT_DELAY commandCount$D_IN;
	if (commandState$EN)
	  commandState <= `BSV_ASSIGNMENT_DELAY commandState$D_IN;
	if (responseCount$EN)
	  responseCount <= `BSV_ASSIGNMENT_DELAY responseCount$D_IN;
	if (responseState$EN)
	  responseState <= `BSV_ASSIGNMENT_DELAY responseState$D_IN;
      end
    if (command$EN) command <= `BSV_ASSIGNMENT_DELAY command$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    command =
	272'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    commandCount = 8'hAA;
    commandState = 2'h2;
    responseCount = 8'hAA;
    responseState = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDebugConvert

