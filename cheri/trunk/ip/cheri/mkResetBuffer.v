//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
//
// On Sun Mar 22 00:26:00 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// reset_n_out                    O     1 reg
// CLK                            I     1 clock
// no_default_reset               I     1 unused
// reset_n_input                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkResetBuffer(CLK,
		     no_default_reset,

		     reset_n_input,

		     reset_n_out);
  input  CLK;
  input  no_default_reset;

  // action method resetIn
  input  reset_n_input;

  // value method reset_n_out
  output reset_n_out;

  // signals for module outputs
  wire reset_n_out;

  // register count
  reg [11 : 0] count;
  wire [11 : 0] count$D_IN;
  wire count$EN;

  // register resetReg
  reg resetReg;
  wire resetReg$D_IN, resetReg$EN;

  // remaining internal signals
  wire [11 : 0] x__h181;

  // value method reset_n_out
  assign reset_n_out = resetReg ;

  // register count
  assign count$D_IN =
	     (count == 12'd0) ? ((!reset_n_input) ? 12'd1 : 12'd0) : x__h181 ;
  assign count$EN = 1'd1 ;

  // register resetReg
  assign resetReg$D_IN = count == 12'd0 ;
  assign resetReg$EN = 1'd1 ;

  // remaining internal signals
  assign x__h181 = count + 12'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
    if (resetReg$EN) resetReg <= `BSV_ASSIGNMENT_DELAY resetReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 12'hAAA;
    resetReg = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkResetBuffer

