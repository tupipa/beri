//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
//
// On Sun Mar 22 00:26:20 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// slave_request_canPut           O     1
// RDY_slave_request_put          O     1
// slave_response_canGet          O     1
// slave_response_peek            O   270
// RDY_slave_response_peek        O     1
// slave_response_get             O   270
// RDY_slave_response_get         O     1
// master_request_canGet          O     1
// master_request_peek            O   350
// RDY_master_request_peek        O     1
// master_request_get             O   350
// RDY_master_request_get         O     1
// master_response_canPut         O     1
// RDY_master_response_put        O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_request_put_val          I   350
// master_response_put_val        I   270
// EN_slave_request_put           I     1
// EN_master_response_put         I     1
// EN_slave_response_get          I     1
// EN_master_request_get          I     1
//
// Combinational paths from inputs to outputs:
//   (slave_request_put_val, EN_slave_request_put) -> master_request_canGet
//   (slave_request_put_val, EN_slave_request_put) -> master_request_peek
//   (slave_request_put_val, EN_slave_request_put) -> RDY_master_request_peek
//   (slave_request_put_val, EN_slave_request_put) -> RDY_master_request_get
//   (slave_request_put_val, EN_slave_request_put) -> master_request_get
//   (master_response_put_val, EN_master_response_put) -> slave_response_canGet
//   (master_response_put_val, EN_master_response_put) -> slave_response_peek
//   (master_response_put_val, EN_master_response_put) -> RDY_slave_response_peek
//   (master_response_put_val, EN_master_response_put) -> RDY_slave_response_get
//   (master_response_put_val, EN_master_response_put) -> slave_response_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBurst(CLK,
	       RST_N,

	       slave_request_canPut,

	       slave_request_put_val,
	       EN_slave_request_put,
	       RDY_slave_request_put,

	       slave_response_canGet,

	       slave_response_peek,
	       RDY_slave_response_peek,

	       EN_slave_response_get,
	       slave_response_get,
	       RDY_slave_response_get,

	       master_request_canGet,

	       master_request_peek,
	       RDY_master_request_peek,

	       EN_master_request_get,
	       master_request_get,
	       RDY_master_request_get,

	       master_response_canPut,

	       master_response_put_val,
	       EN_master_response_put,
	       RDY_master_response_put);
  input  CLK;
  input  RST_N;

  // value method slave_request_canPut
  output slave_request_canPut;

  // action method slave_request_put
  input  [349 : 0] slave_request_put_val;
  input  EN_slave_request_put;
  output RDY_slave_request_put;

  // value method slave_response_canGet
  output slave_response_canGet;

  // value method slave_response_peek
  output [269 : 0] slave_response_peek;
  output RDY_slave_response_peek;

  // actionvalue method slave_response_get
  input  EN_slave_response_get;
  output [269 : 0] slave_response_get;
  output RDY_slave_response_get;

  // value method master_request_canGet
  output master_request_canGet;

  // value method master_request_peek
  output [349 : 0] master_request_peek;
  output RDY_master_request_peek;

  // actionvalue method master_request_get
  input  EN_master_request_get;
  output [349 : 0] master_request_get;
  output RDY_master_request_get;

  // value method master_response_canPut
  output master_response_canPut;

  // action method master_response_put
  input  [269 : 0] master_response_put_val;
  input  EN_master_response_put;
  output RDY_master_response_put;

  // signals for module outputs
  wire [349 : 0] master_request_get, master_request_peek;
  wire [269 : 0] slave_response_get, slave_response_peek;
  wire RDY_master_request_get,
       RDY_master_request_peek,
       RDY_master_response_put,
       RDY_slave_request_put,
       RDY_slave_response_get,
       RDY_slave_response_peek,
       master_request_canGet,
       master_response_canPut,
       slave_request_canPut,
       slave_response_canGet;

  // inlined wires
  wire [350 : 0] req_fifo_rv$port0__write_1,
		 req_fifo_rv$port1__read,
		 req_fifo_rv$port1__write_1,
		 req_fifo_rv$port2__read;
  wire [270 : 0] resp_fifo_rv$port0__write_1,
		 resp_fifo_rv$port1__read,
		 resp_fifo_rv$port1__write_1,
		 resp_fifo_rv$port2__read;
  wire req_fifo_rv$EN_port1__write;

  // register flit
  reg [2 : 0] flit;
  wire [2 : 0] flit$D_IN;
  wire flit$EN;

  // register req_fifo_rv
  reg [350 : 0] req_fifo_rv;
  wire [350 : 0] req_fifo_rv$D_IN;
  wire req_fifo_rv$EN;

  // register resp_fifo_rv
  reg [270 : 0] resp_fifo_rv;
  wire [270 : 0] resp_fifo_rv$D_IN;
  wire resp_fifo_rv$EN;

  // ports of submodule last_fifo
  wire last_fifo$CLR,
       last_fifo$DEQ,
       last_fifo$D_IN,
       last_fifo$D_OUT,
       last_fifo$EMPTY_N,
       last_fifo$ENQ,
       last_fifo$FULL_N;

  // remaining internal signals
  reg [2 : 0] CASE_master_response_put_val_BITS_259_TO_258_0_ETC__q2,
	      CASE_resp_fifo_rvport1__read_BITS_259_TO_258__ETC__q4;
  reg [1 : 0] CASE_req_fifo_rvport1__read_BITS_301_TO_300_0_ETC__q3,
	      CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q1;
  wire [34 : 0] req_addr_lineNumber__h5758;
  wire req_fifo_rv_port1__read__7_BITS_5_TO_3_0_EQ_fl_ETC___d51;

  // value method slave_request_canPut
  assign slave_request_canPut = !req_fifo_rv[350] ;

  // action method slave_request_put
  assign RDY_slave_request_put = !req_fifo_rv[350] ;

  // value method slave_response_canGet
  assign slave_response_canGet = resp_fifo_rv$port1__read[270] ;

  // value method slave_response_peek
  assign slave_response_peek =
	     { resp_fifo_rv$port1__read[269:260],
	       CASE_resp_fifo_rvport1__read_BITS_259_TO_258__ETC__q4,
	       resp_fifo_rv$port1__read[256:0] } ;
  assign RDY_slave_response_peek = resp_fifo_rv$port1__read[270] ;

  // actionvalue method slave_response_get
  assign slave_response_get =
	     { resp_fifo_rv$port1__read[269:260],
	       CASE_resp_fifo_rvport1__read_BITS_259_TO_258__ETC__q4,
	       resp_fifo_rv$port1__read[256:0] } ;
  assign RDY_slave_response_get = resp_fifo_rv$port1__read[270] ;

  // value method master_request_canGet
  assign master_request_canGet = req_fifo_rv$port1__read[350] ;

  // value method master_request_peek
  assign master_request_peek =
	     { (req_fifo_rv$port1__read[301:300] == 2'd0) ?
		 req_addr_lineNumber__h5758 :
		 req_fifo_rv$port1__read[349:315],
	       req_fifo_rv$port1__read[314:302],
	       CASE_req_fifo_rvport1__read_BITS_301_TO_300_0_ETC__q3,
	       (req_fifo_rv$port1__read[301:300] == 2'd0) ?
		 { 292'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		   req_fifo_rv$port1__read[7:6],
		   3'd0,
		   req_fifo_rv$port1__read[2:0] } :
		 req_fifo_rv$port1__read[299:0] } ;
  assign RDY_master_request_peek = req_fifo_rv$port1__read[350] ;

  // actionvalue method master_request_get
  assign master_request_get =
	     { (req_fifo_rv$port1__read[301:300] == 2'd0) ?
		 req_addr_lineNumber__h5758 :
		 req_fifo_rv$port1__read[349:315],
	       req_fifo_rv$port1__read[314:302],
	       CASE_req_fifo_rvport1__read_BITS_301_TO_300_0_ETC__q3,
	       (req_fifo_rv$port1__read[301:300] == 2'd0) ?
		 { 292'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		   req_fifo_rv$port1__read[7:6],
		   3'd0,
		   req_fifo_rv$port1__read[2:0] } :
		 req_fifo_rv$port1__read[299:0] } ;
  assign RDY_master_request_get =
	     req_fifo_rv$port1__read[350] && last_fifo$FULL_N ;

  // value method master_response_canPut
  assign master_response_canPut = !resp_fifo_rv[270] ;

  // action method master_response_put
  assign RDY_master_response_put = !resp_fifo_rv[270] && last_fifo$EMPTY_N ;

  // submodule last_fifo
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) last_fifo(.RST(RST_N),
					 .CLK(CLK),
					 .D_IN(last_fifo$D_IN),
					 .ENQ(last_fifo$ENQ),
					 .DEQ(last_fifo$DEQ),
					 .CLR(last_fifo$CLR),
					 .D_OUT(last_fifo$D_OUT),
					 .FULL_N(last_fifo$FULL_N),
					 .EMPTY_N(last_fifo$EMPTY_N));

  // inlined wires
  assign req_fifo_rv$port0__write_1 =
	     { 1'd1,
	       slave_request_put_val[349:302],
	       CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q1,
	       slave_request_put_val[299:0] } ;
  assign req_fifo_rv$port1__read =
	     EN_slave_request_put ? req_fifo_rv$port0__write_1 : req_fifo_rv ;
  assign req_fifo_rv$EN_port1__write =
	     EN_master_request_get &&
	     (req_fifo_rv_port1__read__7_BITS_5_TO_3_0_EQ_fl_ETC___d51 ||
	      req_fifo_rv$port1__read[301:300] != 2'd0) ;
  assign req_fifo_rv$port1__write_1 =
	     { 1'd0,
	       350'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign req_fifo_rv$port2__read =
	     req_fifo_rv$EN_port1__write ?
	       req_fifo_rv$port1__write_1 :
	       req_fifo_rv$port1__read ;
  assign resp_fifo_rv$port0__write_1 =
	     { 1'd1,
	       master_response_put_val[269:260],
	       CASE_master_response_put_val_BITS_259_TO_258_0_ETC__q2,
	       master_response_put_val[256:0] } ;
  assign resp_fifo_rv$port1__read =
	     EN_master_response_put ?
	       resp_fifo_rv$port0__write_1 :
	       resp_fifo_rv ;
  assign resp_fifo_rv$port1__write_1 =
	     { 1'd0,
	       270'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign resp_fifo_rv$port2__read =
	     EN_slave_response_get ?
	       resp_fifo_rv$port1__write_1 :
	       resp_fifo_rv$port1__read ;

  // register flit
  assign flit$D_IN =
	     req_fifo_rv_port1__read__7_BITS_5_TO_3_0_EQ_fl_ETC___d51 ?
	       3'd0 :
	       flit + 3'd1 ;
  assign flit$EN =
	     EN_master_request_get &&
	     req_fifo_rv$port1__read[301:300] == 2'd0 ;

  // register req_fifo_rv
  assign req_fifo_rv$D_IN = req_fifo_rv$port2__read ;
  assign req_fifo_rv$EN = 1'b1 ;

  // register resp_fifo_rv
  assign resp_fifo_rv$D_IN = resp_fifo_rv$port2__read ;
  assign resp_fifo_rv$EN = 1'b1 ;

  // submodule last_fifo
  assign last_fifo$D_IN =
	     req_fifo_rv$port1__read[301:300] != 2'd0 ||
	     req_fifo_rv_port1__read__7_BITS_5_TO_3_0_EQ_fl_ETC___d51 ;
  assign last_fifo$ENQ = EN_master_request_get ;
  assign last_fifo$DEQ = EN_master_response_put ;
  assign last_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign req_addr_lineNumber__h5758 =
	     req_fifo_rv$port1__read[349:315] + { 32'd0, flit } ;
  assign req_fifo_rv_port1__read__7_BITS_5_TO_3_0_EQ_fl_ETC___d51 =
	     req_fifo_rv$port1__read[5:3] == flit ;
  always@(slave_request_put_val)
  begin
    case (slave_request_put_val[301:300])
      2'd0, 2'd1:
	  CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q1 =
	      slave_request_put_val[301:300];
      default: CASE_slave_request_put_val_BITS_301_TO_300_0_s_ETC__q1 = 2'd2;
    endcase
  end
  always@(master_response_put_val or last_fifo$D_OUT)
  begin
    case (master_response_put_val[259:258])
      2'd0:
	  CASE_master_response_put_val_BITS_259_TO_258_0_ETC__q2 =
	      { 2'd0, last_fifo$D_OUT };
      2'd1:
	  CASE_master_response_put_val_BITS_259_TO_258_0_ETC__q2 =
	      master_response_put_val[259:257];
      default: CASE_master_response_put_val_BITS_259_TO_258_0_ETC__q2 =
		   { 2'd2, master_response_put_val[257] };
    endcase
  end
  always@(req_fifo_rv$port1__read)
  begin
    case (req_fifo_rv$port1__read[301:300])
      2'd0, 2'd1:
	  CASE_req_fifo_rvport1__read_BITS_301_TO_300_0_ETC__q3 =
	      req_fifo_rv$port1__read[301:300];
      default: CASE_req_fifo_rvport1__read_BITS_301_TO_300_0_ETC__q3 = 2'd2;
    endcase
  end
  always@(resp_fifo_rv$port1__read)
  begin
    case (resp_fifo_rv$port1__read[259:258])
      2'd0, 2'd1:
	  CASE_resp_fifo_rvport1__read_BITS_259_TO_258__ETC__q4 =
	      resp_fifo_rv$port1__read[259:257];
      default: CASE_resp_fifo_rvport1__read_BITS_259_TO_258__ETC__q4 =
		   { 2'd2, resp_fifo_rv$port1__read[257] };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        flit <= `BSV_ASSIGNMENT_DELAY 3'd0;
	req_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      350'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	resp_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      270'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (flit$EN) flit <= `BSV_ASSIGNMENT_DELAY flit$D_IN;
	if (req_fifo_rv$EN)
	  req_fifo_rv <= `BSV_ASSIGNMENT_DELAY req_fifo_rv$D_IN;
	if (resp_fifo_rv$EN)
	  resp_fifo_rv <= `BSV_ASSIGNMENT_DELAY resp_fifo_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    flit = 3'h2;
    req_fifo_rv =
	351'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    resp_fifo_rv =
	271'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBurst

